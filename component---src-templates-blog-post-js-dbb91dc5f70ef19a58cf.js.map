{"version":3,"sources":["webpack:///./src/components/elements/hr/index.jsx","webpack:///./src/components/post-title/index.jsx","webpack:///./src/components/post-date/index.jsx","webpack:///./src/components/post-container/index.jsx","webpack:///./src/components/post-navigator/index.jsx","webpack:///./src/components/utterances/index.jsx","webpack:///./src/templates/blog-post.js"],"names":["Hr","className","PostTitle","title","PostDate","date","moment","fromNow","PostContainer","html","dangerouslySetInnerHTML","__html","PostNavigator","pageContext","previous","next","to","fields","slug","rel","frontmatter","utterances","isChanged","Utterences","repo","useContext","ThemeContext","rootElm","React","createRef","useEffect","theme","Storage","Dom","THEME","DARK","current","firstChild","removeChild","document","createElement","utterancesConfig","src","branch","async","crossorigin","Object","keys","forEach","configKey","setAttribute","appendChild","ref","data","location","ScrollManager","post","markdownRemark","metaData","site","siteMetadata","comment","maxWidth","home","description","excerpt","pageQuery"],"mappings":"2HAIaA,G,UAAK,kBAAM,wBAAIC,UAAU,gB,wBCFzBC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,4BAAKA,I,qBCGhCC,G,UAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OAAO,uBAAGJ,UAAU,aAAaK,IAAOD,GAAME,aCJnCC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAC3B,yBAAKC,wBAAyB,CAAEC,OAAQF,M,wBCE7BG,G,UAAgB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACtBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KAElB,OACE,wBAAId,UAAU,aACZ,4BACGa,GACC,kBAAC,OAAD,CAAME,GAAIF,EAASG,OAAOC,KAAMC,IAAI,QAApC,KACKL,EAASM,YAAYjB,QAI9B,4BACGY,GACC,kBAAC,OAAD,CAAMC,GAAID,EAAKE,OAAOC,KAAMC,IAAI,QAC7BJ,EAAKK,YAAYjB,MADpB,U,0FCRNkB,EAAa,KACbC,EAAY,KAEHC,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3BC,qBAAWC,KACX,IAAMC,EAAUC,IAAMC,YAwBtB,OAvBAC,qBAAU,WACR,IAAMC,EAXaC,IAAiBC,IAAmBC,IAAMC,OAY7D,GAAGb,IAAcS,EAAjB,CAGAT,EAAYS,EACZJ,EAAQS,QAAQC,YAAcV,EAAQS,QAAQE,YAAYX,EAAQS,QAAQC,YAC1EhB,EAAakB,SAASC,cAAc,UACpC,IAAMC,EAAmB,CACvBC,IAjBM,gCAkBNlB,OACAmB,OAlBS,SAmBTC,OAAO,EACP,aAAc,WACdC,YAAa,YACbd,MAAOA,EAAQ,cAAgB,gBAEjCe,OAAOC,KAAKN,GAAkBO,SAAQ,SAAAC,GACpC5B,EAAW6B,aAAaD,EAAWR,EAAiBQ,OAEtDtB,EAAQS,QAAQe,YAAY9B,OAGvB,yBAAKpB,UAAU,aAAamD,IAAKzB,K,sBCxC1C,0CAgBe,sBAAsC,IAAnC0B,EAAkC,EAAlCA,KAAMxC,EAA4B,EAA5BA,YAAayC,EAAe,EAAfA,SACnCxB,qBAAU,WAER,OADAyB,MACO,kBAAMA,SACZ,IAEH,IAAMC,EAAOH,EAAKI,eACZC,EAAWL,EAAKM,KAAKC,aACnBzD,EAAmBuD,EAAnBvD,MACAkB,EADmBqC,EAAZG,QACPxC,WAER,OACE,kBAAC,IAAD,CAAQiC,SAAUA,EAAUnD,MAAOA,EAAO2D,SAAU,GAAI7D,UAAU,OAAO8D,MAAM,GAC7E,kBAAC,IAAD,CAAM5D,MAAOqD,EAAKpC,YAAYjB,MAAO6D,YAAaR,EAAKS,UACvD,kBAAC,EAAD,CAAW9D,MAAOqD,EAAKpC,YAAYjB,QACnC,kBAAC,EAAD,CAAUE,KAAMmD,EAAKpC,YAAYf,OACjC,kBAAC,EAAD,CAAeI,KAAM+C,EAAK/C,OAC1B,kBAAC,EAAD,MACA,kBAAC,IAAD,MACA,kBAAC,EAAD,CAAeI,YAAaA,IAC5B,kBAAC,EAAD,CAAYW,KAAMH,MApBT,IAyBF6C,EAAS","file":"component---src-templates-blog-post-js-dbb91dc5f70ef19a58cf.js","sourcesContent":["import React from 'react'\n\nimport './index.scss'\n\nexport const Hr = () => <hr className=\"custom-hr\" />\n","import React from 'react'\n\nexport const PostTitle = ({ title }) => <h1>{title}</h1>\n","import React from 'react'\nimport moment from 'moment';\n\nimport './index.scss'\n\nexport const PostDate = ({ date }) => {\n  return <p className=\"post-date\">{moment(date).fromNow()}</p>\n}","import React from 'react'\n\nexport const PostContainer = ({ html }) => (\n  <div dangerouslySetInnerHTML={{ __html: html }} />\n)\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport './index.scss'\n\nexport const PostNavigator = ({ pageContext }) => {\n  const { previous, next } = pageContext\n\n  return (\n    <ul className=\"navigator\">\n      <li>\n        {previous && (\n          <Link to={previous.fields.slug} rel=\"prev\">\n            ← {previous.frontmatter.title}\n          </Link>\n        )}\n      </li>\n      <li>\n        {next && (\n          <Link to={next.fields.slug} rel=\"next\">\n            {next.frontmatter.title} →\n          </Link>\n        )}\n      </li>\n    </ul>\n  )\n}\n","import React, { useEffect, useState, useContext } from 'react'\nimport { ThemeContext } from '../theme-context';\n\nimport * as Dom from '../../utils/dom'\nimport * as Storage from '../../utils/storage'\nimport { THEME } from '../../constants'\n\nconst getTheme = () => Storage.getTheme(Dom.hasClassOfBody(THEME.DARK));\n\nconst src = 'https://utteranc.es/client.js'\nconst branch = 'master'\nlet utterances = null;\nlet isChanged = null;\n\nexport const Utterences = ({ repo }) => {\n  useContext(ThemeContext);\n  const rootElm = React.createRef()\n  useEffect(() => {\n    const theme = getTheme();\n    if(isChanged === theme) {\n      return;\n    }\n    isChanged = theme;\n    rootElm.current.firstChild && rootElm.current.removeChild(rootElm.current.firstChild);\n    utterances = document.createElement('script')\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n      theme: theme ? \"github-dark\" : \"github-light\"\n    }\n    Object.keys(utterancesConfig).forEach(configKey => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey])\n    })\n    rootElm.current.appendChild(utterances)\n  })\n\n  return <div className=\"utterences\" ref={rootElm} />\n}","import React, { useEffect } from 'react'\nimport { graphql } from 'gatsby'\n\nimport * as Elements from '../components/elements'\nimport { Layout } from '../layout'\nimport { Head } from '../components/head'\nimport { PostTitle } from '../components/post-title'\nimport { PostDate } from '../components/post-date'\nimport { PostContainer } from '../components/post-container'\nimport { Bio } from '../components/bio'\nimport { PostNavigator } from '../components/post-navigator'\nimport { Utterences } from '../components/utterances'\nimport * as ScrollManager from '../utils/scroll'\n\nimport '../styles/code.scss'\n\nexport default ({ data, pageContext, location }) => {\n  useEffect(() => {\n    ScrollManager.init()\n    return () => ScrollManager.destroy()\n  }, [])\n\n  const post = data.markdownRemark\n  const metaData = data.site.siteMetadata\n  const { title, comment } = metaData\n  const { utterances } = comment\n\n  return (\n    <Layout location={location} title={title} maxWidth={32} className=\"post\" home={true}>\n      <Head title={post.frontmatter.title} description={post.excerpt} />\n      <PostTitle title={post.frontmatter.title} />\n      <PostDate date={post.frontmatter.date} />\n      <PostContainer html={post.html} />\n      <Elements.Hr />\n      <Bio />\n      <PostNavigator pageContext={pageContext} />\n      <Utterences repo={utterances} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        comment {\n          utterances\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 280)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}