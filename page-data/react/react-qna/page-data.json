{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/react-qna/","result":{"data":{"site":{"siteMetadata":{"title":"Deep Dive Magic Code","author":"Goidle","comment":{"utterances":"goidle/goidle.github.io"}}},"markdownRemark":{"id":"24d42ef5-34a6-5c6c-a6c4-6484bb25f1a9","excerpt":"글의 내용은 React v18.3.1, 함수형 컴포넌트 기준이며, 작성된 리액트 코드는 설명에 필요한 부분만 사용하였습니다. 전체 코드는 링크를 통해 직접 확인해 볼 수 있습니다. Q. 리액트를 개발하다 보면 다음의 여러 타입을 접하게 됩니다. ReactElement, ExoticComponent, ReactNode가 정확히 무엇이고 차이점은 어떻게 되나요? 리액트를 개발하면 대게 가장 먼저 접하게 되는 것은 컴포넌트입니다. 컴포넌트는 JSX 형태로 사용되며, Babel…","html":"<blockquote>\n<p>글의 내용은 React v18.3.1, 함수형 컴포넌트 기준이며, 작성된 리액트 코드는 설명에 필요한 부분만 사용하였습니다. 전체 코드는 링크를 통해 직접 확인해 볼 수 있습니다.</p>\n</blockquote>\n<h3 id=\"q-리액트를-개발하다-보면-다음의-여러-타입을-접하게-됩니다\" style=\"position:relative;\"><a href=\"#q-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EA%B0%9C%EB%B0%9C%ED%95%98%EB%8B%A4-%EB%B3%B4%EB%A9%B4-%EB%8B%A4%EC%9D%8C%EC%9D%98-%EC%97%AC%EB%9F%AC-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%91%ED%95%98%EA%B2%8C-%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-label=\"q 리액트를 개발하다 보면 다음의 여러 타입을 접하게 됩니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 리액트를 개발하다 보면 다음의 여러 타입을 접하게 됩니다.</h3>\n<h3 id=\"reactelement-exoticcomponent-reactnode가-정확히-무엇이고-차이점은-어떻게-되나요\" style=\"position:relative;\"><a href=\"#reactelement-exoticcomponent-reactnode%EA%B0%80-%EC%A0%95%ED%99%95%ED%9E%88-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%98%EB%82%98%EC%9A%94\" aria-label=\"reactelement exoticcomponent reactnode가 정확히 무엇이고 차이점은 어떻게 되나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ReactElement, ExoticComponent, ReactNode가 정확히 무엇이고 차이점은 어떻게 되나요?</h3>\n<p>리액트를 개발하면 대게 가장 먼저 접하게 되는 것은 컴포넌트입니다. 컴포넌트는 JSX 형태로 사용되며, Babel을 통해 다음과 같이 변환됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">&lt;Bar name=\"bar\" /></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// 바벨 빌드 이후</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  Foo<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> \n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    Bar<span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리가 JSX로 작성하게 되는 컴포넌트는 <code class=\"language-text\">React.createElement()</code>를 통해서 <strong>React Element</strong>로 생성됩니다. 이것은 컴포넌트의 정보를 객체로 모델링하는 것이며, 자식 참조도 포함하기 때문에 <code class=\"language-text\">App</code>은 리액트 앱의 전체 구조를 들고 있는 것과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ref <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">;</span>\n    key <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propName <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// key, ref는 제외하고 할당한다.</span>\n      props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> childrenLength <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 단일 작식이면 children을,여러개이면 배열을 할당한다.</span>\n  props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>\n    type<span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">,</span>\n    ref<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactElement.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react/src/ReactElement.js#L362\">link</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> <span class=\"token constant\">REACT_ELEMENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Symbol.for('react.element')</span>\n    type<span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n    key<span class=\"token operator\">:</span> key<span class=\"token punctuation\">,</span>\n    ref<span class=\"token operator\">:</span> ref<span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> props<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> element\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactElement.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react/src/ReactElement.js#L148\">link</a></p>\n</blockquote>\n<p><strong>React Element</strong>은 추후에 <strong>ReactDOM</strong>을 통해 흔히 말하는, 하지만 <strong>DOM</strong>과는 전혀 다른 <strong>Virtual DOM</strong>(이하 <strong>VDOM</strong>)을 만들 때 사용됩니다. </p>\n<p>또한, 리액트를 개발하다 보면 직접 작성한 컴포넌트 외에도 리액트에서 제공하는 <strong>memo</strong>, <strong>lazy</strong> 등을 사용하여 컴포넌트를 랩핑할 때가 있습니다. 이것들은 컴포넌트를 렌더링하기 전에 특수한 역할을 하도록 내부적으로 구현된 또 다른 객체이며 이를 <strong>Exotic Component</strong>라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 타입명은 Exotic Component 이지만, 쓰이는 곳은 React Element의 type에 쓰이기 때문에 변수명은 elementType이다.</span>\n  <span class=\"token keyword\">const</span> elementType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> <span class=\"token constant\">REACT_MEMO_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Symbol.for('react.memo')</span>\n    type<span class=\"token punctuation\">,</span>\n    compare<span class=\"token operator\">:</span> compare <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> compare<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> elementType<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactMemo.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react/src/ReactMemo.js#L12\">link</a></p>\n</blockquote>\n<p>이 <strong>Exotic Component</strong> 객체는 다시 JSX로 작성되면서 <strong>React Element</strong>로 생성됩니다. <strong>React Element</strong>와 <strong>Memo Exotic Component</strong>의 생김새를 비교해보면 공통적으로 <code class=\"language-text\">$$typeof</code> 와 <code class=\"language-text\">type</code>를 가지고 있습니다. 이 속성들은 추후에 렌더링 과정에서 Element의 종류를 구분하는데 사용됩니다.</p>\n<p><strong>React Element</strong>가 무엇인지 알아보았으니 <code class=\"language-text\">React.isValidElement()</code>가 무엇을 의미하는지 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> object <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span>\n    object <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    object<span class=\"token punctuation\">.</span>$$<span class=\"token keyword\">typeof</span> <span class=\"token operator\">===</span> <span class=\"token constant\">REACT_ELEMENT_TYPE</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactElement.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react/src/ReactElement.js#L567\">link</a></p>\n</blockquote>\n<p><code class=\"language-text\">isValidElement()</code>는<code class=\"language-text\">createElement()</code>가 반환하는 <strong>React Element</strong>을 확인하는 유틸 함수입니다.   </p>\n<p>추가로, 컴포넌트 전달 방식의 차이점도 알아볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>Bar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false, Exotic Component는 React Element가 아니다.</span>\n<span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span> or <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> LoggingElementType <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoggingElementType</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token comment\">// Foo function</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoggingElementType</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">&lt;Foo /></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoggingElementType</span></span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">// Foo function</span>\n<span class=\"token comment\">// 이것은 그냥 함수를 전달하는 것과 같습니다.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoggingElementType</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Foo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>그렇다면 <strong>React Node</strong>는 무엇일까요? <strong>React Element</strong>가 컴포넌트만을 표현하는 것과 다르게 <strong>React Node</strong>는 리액트가 렌더링할 수 있는 모든 것을 표현하는 타입입니다. 예를 들어, 요소를 미노출 하기 위한 <code class=\"language-text\">null</code>이나 컴포넌트가 아닌 문자열 등을 JSX로 작성할 수 있음을 의미합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactNode</span> <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> ReactElement\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span>\n    <span class=\"token operator\">|</span> Iterable<span class=\"token operator\">&lt;</span>ReactNode<span class=\"token operator\">></span> <span class=\"token comment\">// 배열</span>\n    <span class=\"token operator\">|</span> ReactPortal\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<p>항상 자식으로 단일 컴포넌트만 작성되길 원한다면 컴포넌트 <code class=\"language-text\">children</code> 타입을 <code class=\"language-text\">ReactElement</code> 로 정의하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> ReactElement<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">bar</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">// error</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">&lt;Bar /></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Baz</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>마지막으로 사소한 부분이지만, 개발자가 정의하는 컴포넌트나 리액트가 제공하는 것 외에도 JSX로 HTML 요소들을 작성할 수 있습니다. 이를 내부 코드에서는 <strong>Host Component</strong>라고 부르며, <strong>React Element</strong> 생성시 <code class=\"language-text\">type</code>이 문자열로 작성되는 점만 다릅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// 바벨 빌드 이후</span>\n<span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"q-react-dom의-createrootrender의-역할은-무엇이고-뒤에서는-어떠한-일들이-일어나고-있나요\" style=\"position:relative;\"><a href=\"#q-react-dom%EC%9D%98-createrootrender%EC%9D%98-%EC%97%AD%ED%95%A0%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EB%92%A4%EC%97%90%EC%84%9C%EB%8A%94-%EC%96%B4%EB%96%A0%ED%95%9C-%EC%9D%BC%EB%93%A4%EC%9D%B4-%EC%9D%BC%EC%96%B4%EB%82%98%EA%B3%A0-%EC%9E%88%EB%82%98%EC%9A%94\" aria-label=\"q react dom의 createrootrender의 역할은 무엇이고 뒤에서는 어떠한 일들이 일어나고 있나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. React DOM의 createRoot(..).render(…)의 역할은 무엇이고 뒤에서는 어떠한 일들이 일어나고 있나요?</h3>\n<p><strong>React Element</strong>는 JSX로 작성된 컴포넌트 <strong>타입</strong>, <strong>속성</strong>, <strong>하위 자식</strong>의 정보를 가진 단순한 객체입니다. 이러한 객체를 가지고 리액트는 UI를 효율적으로 관리할 수 있어야 하며, 이를 위한 아키텍처가 필요했습니다. 이 아키텍처에는 중요한 요구사항이 있었습니다. 바로 렌더링을 중단, 정지, 재시작 할 수 있어야 한다는 것이였습니다. 이 요구사항은 사용자의 UX와 밀접한 관련이 있으며 좀 더 세분화하면 다음과 같습니다.</p>\n<ol>\n<li>사용자의 물리적인 이벤트에 대한 피드백은 즉각 UI에 반영되길 사용자는 기대한다.</li>\n<li>UI 전환은 느릴 수 있다고 사용자는 인지하고 있으므로 해당 업데이트는 우선순위를 낮게 설정하여 렌더링할 수 있어야 한다.</li>\n<li>2번이 이미 진행중이라도 우선순위가 더 높은 업데이트가 발생한다면 즉각 중단하고 이를 먼저 렌더링할 수 있어야 한다.</li>\n<li>3번을 위해서 2번 렌더링 과정은 사용자의 이벤트를 블록킹 하면 안된다. 다시 말하면, 해당 렌더링은 콜스택을 지속해서 점유하지 않아야 한다.</li>\n<li>여러 업데이트가 대기중이라면 우선순위가 더 높은 업데이트를 먼저 렌더링할 수 있어야 한다. 이는 1번을 만족시킬 수 있는 조건이다.</li>\n<li>우선순위에서 밀린 업데이트에 대해서 다시 렌더링을 진행할 수 있어야 한다.</li>\n</ol>\n<p>위 내용은 우선순위 기반 렌더링을 설명한 것입니다. 이것을 만족하기 위해서는 렌더링 작업을 아주 잘게 쪼개고 이들 사이의 연결이 끊어지지 않도록 해야하며, 작업을 최소한의 단위로 쪼개다 보면 결국 컴포넌트 단위가 됩니다. 이 작업 단위가 <strong>Fiber</strong>이며 트리 구조로 연결을 해 놓습니다. 이것이 바로 <strong>Fiber Architecture</strong> 구조입니다. <strong>Fiber</strong>에는 연결 정보 말고도 컴포넌트 단위의 렌더링 작업도 수행해야 하므로 컴포넌트와 관련된 타입, 상태와 같은 정보도 포함되어 있습니다. </p>\n<p>다음의 <strong>React Element</strong>가 <strong>React DOM</strong>의 <strong>render()</strong>를 통해 어떻게 <strong>Fiber</strong> 트리로 구성되는지 확인해보면서 좀 더 자세한 내용을 다뤄보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> children<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 바벨 빌드 이후</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  Foo<span class=\"token punctuation\">,</span> <span class=\"token comment\">// type</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">null</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// props</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// ...children</span>\n    Bar<span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Fiber</strong>는 트리 구조를 위한 다음과 같은 속성을 가지고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fiber</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 부모 경로</span>\n  child<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 첫번째 자식 경로</span>\n  sibling<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 오른쪽 형제 경로</span>\n  alternate<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 반대쪽 트리</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactInternalTypes.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactInternalTypes.js#L67\">link</a></p>\n</blockquote>\n<p>&#x3C;App />은 다음과 같이 구성됩니다.<br>\n<img src=\"https://github.com/user-attachments/assets/3ac629e9-dad1-4c5f-b10a-cd75ae5ee3d7\" alt=\"fiber-tree\"></p>\n<p>이 트리를 실제 <strong>DOM</strong>에 삽입하기 위한 컨테이너 <strong>HTML Element</strong> 가 필요합니다. 이것은 <code class=\"language-text\">createRoot()</code>를 통해서 개발자가 원하는 대상을 리액트에게 전달할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createRoot<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;div id=\"root\" /></span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">createRoot()</code>는 <strong>Fiber</strong> 트리의 최상단 노드인 <strong>Fiber Root Node</strong>를 생성하며 트리 전반에 필요한 정보를 이 root에서 관리합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FiberRootNode</span><span class=\"token punctuation\">(</span>\n  containerInfo<span class=\"token punctuation\">,</span><span class=\"token comment\">// createRoot()에 넘겨준 rootElement</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>containerInfo <span class=\"token operator\">=</span> containerInfo<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추후 설명</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiberRoot.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberRoot.new.js#L52\">link</a></p>\n</blockquote>\n<p><img src=\"https://github.com/user-attachments/assets/33decc7a-b28e-4dc3-ab55-2ddd5943f234\" alt=\"fiber-root-node\"></p>\n<p>이제 &#x3C;App /> 트리를 <strong>Fiber Root Node</strong>에 연결하면 완성입니다. 하지만 이에 앞서 위에서 언급한 아키텍처 요구사항인 <em>“렌더링을 중단 할 수 있어야 한다.”</em>를 좀 더 깊이 생각해봐야 합니다. 이 요구사항은 렌더링 과정에서 생성된 결과물을 <strong>DOM</strong>에 즉각적으로 반영하면 안됨을 의미합니다. <strong>Fiber</strong> 하나의 작업을 완료했다고 바로 <strong>DOM</strong>에 반영해버리면 우선순위가 더 높은 업데이트가 발생하여 현재 렌더링을 중단해야 될 때 UI의 일관성이 깨지게 됩니다. </p>\n<p>리액트의 렌더링은 상태의 스냅샷을 찍는 것과 같습니다. A 상태를 업데이트하여 렌더링을 진행하면 A 상태만 반영된 결과물이 만들어지고 이를 <strong>DOM</strong>에 반영합니다. 하지만 잘게 쪼갠 <strong>Fiber</strong>의 작업이 완료됐다고 바로 <strong>DOM</strong>에 반영해버리면 렌더링이 완료되지 않은 A 상태의 스냅샷과 우선순위가 더 높은 B 상태의 스냅샷이 찢겨진 상태로 함께 <strong>DOM</strong>에 반영되면서 사용자 입장에서는 UI의 일관성이 깨져 보이는 현상이 발생할 수 있게됨을 의미합니다.</p>\n<p>그래서 리액트는 렌더링이 모두 완료된 후에만 <strong>DOM</strong>에 반영할 수 있도록 작업용 트리(트리의 렌더링이 완료되기 전까지는 언제든지 수정할 수 있는)를 하나 더 둡니다. 이 결과 <strong>Fiber</strong>는 두 가지 버전이 존재하게 됩니다. <strong>DOM</strong>에 반영된 <strong>current</strong>와 현재 작업중인 <strong>workInProgress</strong>가 이에 해당합니다.  </p>\n<blockquote>\n<p>리액트 내부에서는 렌더링 작업 진행중인 <strong>Fiber</strong>을 <strong>workInProgress</strong>, 반대로 렌더링이 끝나 DOM에 반영된 <strong>Fiber</strong>을 <code class=\"language-text\">current</code>로 명칭합니다.</p>\n</blockquote>\n<p>두 가지 버전의 트리가 존재하기 때문에 이들 사이에도 연결을 해주어야 합니다. <strong>Fiber</strong>는 <code class=\"language-text\">alternate</code> 속성으로 서로 참조하며, 각 트리의 루트를 판단할 수 있도록 <strong>Host Root Fiber</strong>라는 <strong>Fiber</strong>을 최상단에 하나 더 둡니다.</p>\n<p>다음은 <code class=\"language-text\">createRoot()</code>가 실행된 직후의 그림입니다. 이때의 <code class=\"language-text\">current</code>가 가리키는 <strong>Host Root Fiber</strong> 속성의 대부분은 <code class=\"language-text\">null</code>입니다. 왜냐하면 처음에는 <strong>DOM</strong>에 무엇도 렌더링된 것이 없기 때문입니다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/8bb44edd-aa85-4253-85d9-ec29831af9fb\" alt=\"host-root-fiber\"></p>\n<p><code class=\"language-text\">root</code>를 만들고 <code class=\"language-text\">render(&lt;App />)</code>를 호출하면 이제 본격적으로 렌더링을 시작하며, <strong>Host Root Fiber</strong>부터 시작해서 <code class=\"language-text\">App</code> ~ <code class=\"language-text\">div</code>까지 순회하며 <strong>React Element</strong>를 <strong>Fiber</strong>로 확장하며 트리를 만들어 나갑니다. 이렇게 렌더링을 완료하면 우리가 처음 봤던 &#x3C;App />의 트리가 <strong>Host Root Fiber</strong>에 붙게 됩니다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/f4d80cf3-b42f-4659-8a20-3d99b6983d8a\" alt=\"init-render\"></p>\n<p>이 과정을 <strong>Render phase</strong>라고 합니다. 이 단계의 작업용 트리는 아직 <strong>DOM</strong>에 반영된 것이 아니므로 위 그림에서와 같이 아직 <code class=\"language-text\">current</code>가 아님을 유의해야 합니다. </p>\n<p>후반부에 확인하게 될 작업용 트리를 <strong>DOM</strong>에 반영하는 <strong>Commit phase</strong>가 완료되어야 다음과 같이 <strong>Host Root Fiber</strong>을 <code class=\"language-text\">current</code>로 변경합니다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/5f51498e-13fa-4670-8938-505b2c78a3fa\" alt=\"current-change\"></p>\n<h3 id=\"q-컴포넌트의-상태를-업데이트-했을-때-어떻게-리-렌더링되나요-상태가-변경된-컴포넌트만-리-렌더링-되나요\" style=\"position:relative;\"><a href=\"#q-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%96%88%EC%9D%84-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A6%AC-%EB%A0%8C%EB%8D%94%EB%A7%81%EB%90%98%EB%82%98%EC%9A%94-%EC%83%81%ED%83%9C%EA%B0%80-%EB%B3%80%EA%B2%BD%EB%90%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A7%8C-%EB%A6%AC-%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%90%98%EB%82%98%EC%9A%94\" aria-label=\"q 컴포넌트의 상태를 업데이트 했을 때 어떻게 리 렌더링되나요 상태가 변경된 컴포넌트만 리 렌더링 되나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 컴포넌트의 상태를 업데이트 했을 때 어떻게 리-렌더링되나요? 상태가 변경된 컴포넌트만 리-렌더링 되나요?</h3>\n<p><strong>Fiber</strong>에는 트리와 관련된 정보 외에도 컴포넌트와 관련된 정보들이 포함되어 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fiber</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n  tag<span class=\"token operator\">:</span> WorkTag<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Fiber 종류</span>\n  type<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// React Element의 type. 함수형 컴포넌트는 함수, Host Component는 문자열</span>\n  lanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴포넌트에서 발생한 업데이트 정보</span>\n  childLanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 하위 트리에서 발생한 업데이트 정보</span>\n  pendingProps<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 렌더링 전 props</span>\n  memoizedProps<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 렌더링 후 props</span>\n  memoizedState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴포넌트 상태, 함수형 컴포넌트라면 훅 리스트</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactInternalTypes.js <a href=\"https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactInternalTypes.js#L95\">link</a></p>\n</blockquote>\n<blockquote>\n<p> <strong>Lane</strong>은 여러 종류의 <strong>Lane</strong>이 존재하며(<a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberLane.new.js#L36-L82\">link</a>), 이는 업데이트의 종류와 우선순위를 모델링한 것입니다. 이 글에서는 깊게 다루지 않으므로 자세한 설명은 생략합니다. </p>\n</blockquote>\n<p>컴포넌트의 상태를 업데이트하면 해당 컴포넌트부터 <strong>Host Root Fiber</strong>까지 업데이트가 발생했음을 표식으로 남깁니다. 이것은 추후에 렌더링 과정에서 업데이트가 발생한 컴포넌트를 찾아갈 때 이정표로 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">markUpdateLaneFromFiberToRoot</span><span class=\"token punctuation\">(</span>\n  sourceFiber<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  lane<span class=\"token operator\">:</span> Lane<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 업데이트가 발생한 컴포넌트에 표식 남기기</span>\n  sourceFiber<span class=\"token punctuation\">.</span>lanes <span class=\"token operator\">=</span> <span class=\"token function\">mergeLanes</span><span class=\"token punctuation\">(</span>sourceFiber<span class=\"token punctuation\">.</span>lanes<span class=\"token punctuation\">,</span> lane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n  \n  <span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> sourceFiber<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// host까지 올라가면서 하위 요소에 업데이트가 있음을 표시</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    parent<span class=\"token punctuation\">.</span>childLanes <span class=\"token operator\">=</span> <span class=\"token function\">mergeLanes</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>childLanes<span class=\"token punctuation\">,</span> lane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiberConcurrentUpdate.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberConcurrentUpdates.new.js#L170\">link</a></p>\n</blockquote>\n<p>만약 &#x3C;Foo/>의 상태를 수정했다면 표식은 다음과 같습니다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/6457ffc1-4f17-4093-ba62-879df91068d2\" alt=\"mark-lane\"></p>\n<p><u>렌더링은 항상 <strong>Host Root Fiber</strong>에서부터 시작하며</u>, 기본적으로 <strong>Lane</strong> 표식이 있는 컴포넌트를 찾아 순회합니다. 이때 거쳐가는 모든 <strong>Fiber</strong>을 대상으로 렌더링 작업을 진행하진 않고 다음 기준 중 하나라도 해당 해야 작업을 진행합니다. 이 기준을 이해하고 기억해두는 것이 리액트 개발에 많은 도움이 될 수 있습니다.</p>\n<ol>\n<li><strong>current</strong>가 없다. 즉, 이번에 새롭게 생성된 <strong>Fiber</strong>이다.</li>\n<li><strong>current</strong>와 <strong>workInProgress</strong>의 <strong>props</strong>가 다르다.</li>\n<li>현재 렌더링 대상인 <strong>lane</strong>이 기록되어 있다.</li>\n</ol>\n<p>위 기준은 결국 UI의 달라짐을 의미합니다. <strong>Props</strong>가 다르면 해당 값을 반영한, 업데이트 <strong>Lane</strong>이 기록되어 있다면 해당 업데이트를 반영한 UI가 다를 수 있으며, <strong>current</strong>가 없다면 하위 UI 전체가 새롭게 추가됨을 의미입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 첫 렌더링(마운트)이라면 null일 수 있다.</span>\n  workInProgress<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  renderLanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span><span class=\"token comment\">// 렌더링을 발생시킨 업데이트의 lane을 의미한다.</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// current가 있다면 DOM에 반영된 요소가 있음을 의미한다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>memoizedProps<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 2. current와 workInProgress의 Props가 다르다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    \n      <span class=\"token comment\">// 3. 현재 렌더링 대상인 lane이 기록되어 있다.</span>\n      <span class=\"token keyword\">const</span> hasScheduledUpdateOrContext <span class=\"token operator\">=</span> <span class=\"token function\">checkScheduledUpdateOrContext</span><span class=\"token punctuation\">(</span>\n        current<span class=\"token punctuation\">,</span>\n        renderLanes<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token comment\">// 1~3에 해당하지 않는다면 렌더링 작업을 진행하지 않는다.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasScheduledUpdateOrContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token function\">attemptEarlyBailoutIfNoScheduledUpdate</span><span class=\"token punctuation\">(</span>\n          current<span class=\"token punctuation\">,</span>\n          workInProgress<span class=\"token punctuation\">,</span>\n          renderLanes<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 1. current가 없다.</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 이하 Fiber 타입에 맞게 렌더링 작업 진행한다.</span>\n  <span class=\"token comment\">// 1 ~ 3 기준에 해당하지 않는다면 여기까지 도달할 수 없다.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> LazyComponent<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> FunctionComponent<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> HostRoot<span class=\"token operator\">:</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">case</span> HostComponent<span class=\"token operator\">:</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiberBeginWork.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3699\">link</a></p>\n</blockquote>\n<p>업데이트 <strong>Lane</strong>을 확인하는 코드는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkScheduledUpdateOrContext</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  renderLanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 렌더링을 발생시킨 업데이트의 lane을 의미한다.</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> updateLanes <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>lanes<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">includesSomeLane</span><span class=\"token punctuation\">(</span>updateLanes<span class=\"token punctuation\">,</span> renderLanes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiberBeginWork.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3470\">link</a></p>\n</blockquote>\n<p>이제 <code class=\"language-text\">beginWork()</code>에서 1 ~ 3번에 해당하지 않았을 때, 현재 <strong>Fiber</strong>의 렌더링 작업을 중단하는 방법을 알아야합니다. 이때 중요한 점은 해당 <strong>Fiber</strong>에 대해 렌더링 작업을 하지 않는다고 단순히 그냥 끝내면 안되고 렌더링 대상까지 작업용 트리를 이어 갈 수 있도록 해주어야 합니다. </p>\n<p>예를 들어 위 이미지에서 &#x3C;Foo/>가 업데이트되어 현재 &#x3C;App/>이 렌더링 중이라면, &#x3C;App/>은 1~3번에 해당하지 않기 때문에 렌더링 작업을 진행하지 않고 다음 작업을 이어가기 위한 &#x3C;Foo/>의 작업용 <strong>Fiber(workInProgress)</strong>를 만들어 반환해야 합니다. 그렇지 않고 <code class=\"language-text\">null</code>을 반환하면 다음 렌더링 대상이 없어 &#x3C;App/> 하위 트리로의 경로가 끊겨 렌더링 작업을 이어갈 수 없게 됩니다.</p>\n<p>이를 위한 함수가 위에서 확인한 <code class=\"language-text\">beginWork()</code>의 <code class=\"language-text\">attemptEarlyBailoutIfNoScheduledUpdate()</code>입니다. 이 함수는 곧 다음의 <code class=\"language-text\">bailoutOnAlreadyFinishedWork()</code>로 이어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">bailoutOnAlreadyFinishedWork</span><span class=\"token punctuation\">(</span>\n  <span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;App/>의 current Fiber</span>\n  <span class=\"token literal-property property\">workInProgress</span><span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;App/>의 렌더링 작업중인 workInProgress Fiber</span>\n  <span class=\"token literal-property property\">renderLanes</span><span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// &lt;Foo/>의 current가 있다면 복제하고, 없다면 새로 생성된 Fiber을 반환한다. 다른말로 workInProgress를 반환한다.</span>\n  <span class=\"token function\">cloneChildFibers</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiberBeginWork.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3365\">link</a></p>\n</blockquote>\n<p><code class=\"language-text\">cloneChildFibers()</code>(<a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactChildFiber.new.js#L1360-L1394\">link</a>)는 &#x3C;App />은 더 이상 렌더링을 진행할 필요가 없지만 하위 트리로 렌더링 경로가 끊기지 않도록 작업용 트리를 만들기 위한 함수입니다. &#x3C;App /> 하위 자식들이 이미 <strong>DOM</strong>에 반영되어 있다면 <strong>current</strong>를 복제하고 그게 아니라면 <strong>Fiber</strong>를 새로 생성하여 <strong>workInProgress</strong>를 만듭니다.<br>\n<code class=\"language-text\">cloneChildFibers()</code>는 다음의 <code class=\"language-text\">createWorkInProgress()</code>로 이어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">createWorkInProgress</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span> pendingProps<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fiber <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> workInProgress <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 한번의 렌더링만 완료된 경우, current만 존재함.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgress <span class=\"token operator\">=</span> <span class=\"token function\">createFiber</span><span class=\"token punctuation\">(</span>\n      current<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">,</span>\n      pendingProps<span class=\"token punctuation\">,</span>\n      current<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>\n      current<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    workInProgress<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 상호 참조</span>\n    workInProgress<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    current<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 이전에 만들어 둔 Fiber가 있다면, 이번 렌더링에 초기화해서 WIP로 사용한다.</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>pendingProps <span class=\"token operator\">=</span> pendingProps<span class=\"token punctuation\">;</span>\n    workInProgress<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  workInProgress<span class=\"token punctuation\">.</span>childLanes <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>childLanes<span class=\"token punctuation\">;</span>\n  workInProgress<span class=\"token punctuation\">.</span>lanes <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>lanes<span class=\"token punctuation\">;</span>\n\n  workInProgress<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 이하 대충 current 속성을 WIP로 복사함</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiber.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiber.new.js#L249\">link</a></p>\n</blockquote>\n<p><img src=\"https://github.com/user-attachments/assets/defe111c-064d-43bb-9279-65ed9398a424\" alt=\"create-wip\"></p>\n<p>&#x3C;App />은 1 ~ 3번 기준에 해당하지 않으면서 <code class=\"language-text\">childLanes</code>를 가지고 있기 때문에(<em>“내 하위 트리에서 업데이트 발생했고, 나는 렌더링 할 필요 없어!”</em>), 자신의 하위 트리로 렌더링이 진행될 수 있도록 &#x3C;Foo/>을 <strong>workInProgress</strong>로 만들어 반환합니다. 이때 &#x3C;Foo />의 <strong>current</strong>을 복제했기 때문에 트리 정보도 그대로 가져옵니다. 그래서 &#x3C;Foo/>의 <strong>workInProgress</strong> <code class=\"language-text\">child</code>는 <strong>current</strong>와 같은 &#x3C;Bar />의 <strong>Fiber</strong>을 참조하고 있습니다. </p>\n<p>이렇게 &#x3C;Foo/>의 <strong>workInProgress</strong>가 반환되면 이를 대상으로 본격적인 렌더링 작업이 진행됩니다(이는 다음 섹션에서 다룹니다.).</p>\n<p>여기서 우리는 <strong>Props</strong> 비교가 렌더링 기준이 된다는 정보를 가지고 몇 가지 최적화 기법을 짚고 넘어갈 수 있습니다. 다음은 이해를 돕기 위한 결과물은 같지만 구조가 다른 코드입니다.</p>\n<p><strong>A</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><strong>B</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> children\n<span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>A</strong>는 &#x3C;Bar />을 &#x3C;Foo /> 내부에 작성하였고, <strong>B</strong>는 &#x3C;Foo /> 외부에서 전달받고 있습니다. 우리는 일반적으로 컴포넌트의 형태가 고정되어 있다면 <strong>A</strong>와 같이, 확장을 위해서는 <strong>B</strong>와 같이 작성합니다. 이것외에도 최적화 이유로 <strong>B</strong>와 같은 구조를 가져갈 수도 있습니다.</p>\n<p><strong>A</strong>의 경우, &#x3C;Foo />의 상태가 변경되면, &#x3C;Foo />는 렌더링을 위해 호출되며 &#x3C;Bar />을 반환합니다. 여기서 &#x3C;Bar />는 바벨을 통해 <code class=\"language-text\">React.createElement()</code>로 변환되면서 <strong>React Element</strong>을 생성합니다. <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react/src/ReactElement.js#L366\">createElement()</a>을 확인해보면 <code class=\"language-text\">props</code>는 리터럴 객체로 정의됩니다. 이것은 실질적으로 &#x3C;Bar />에 <code class=\"language-text\">props</code>를 아무것도 넘겨주지 않아도 &#x3C;Foo/>의 매 호출마다 <code class=\"language-text\">props</code>가 달라져 렌더링 작업 대상이 됨을 나타냅니다. 이는 대게 문제가 되지 않지만 다음과 같은 경우에는 최적화를 고려해야 할 수 있습니다.</p>\n<ol>\n<li>&#x3C;Bar /> 하위 트리의 크기가 크거나 &#x3C;Foo /> 내부에 리스트와 같은 요소의 컴포넌트가 많이 정의되어 있다.</li>\n<li>&#x3C;Foo />의 특성상 상태가 자주 변경된다. </li>\n<li>2의 상태 변경과 무관하거나 너무 다른 빈도의 1에 해당하는 컴포넌트가 존재한다.</li>\n</ol>\n<p>이런 경우, <strong>B</strong>와 같이 컴포넌트를 &#x3C;Foo />와 분리하여 부모로 올리는 방법을 선택할 수 있습니다. <strong>B</strong>의 &#x3C;Bar />는 이미  &#x3C;Foo />의 외부에서 <strong>React Element</strong>로 생성되어<code class=\"language-text\">children</code>로 전달되기 때문에 아무리 &#x3C;Foo />가 호출되어도 <strong>Props</strong>가 달라지는 일은 없으므로 &#x3C;Bar />에 대해서는 렌더링 작업을 진행하지 않습니다.</p>\n<p>하지만 여러 가지 이유로 이런 구조적 최적화를 할 수 없다면 어떻게 해야 할까요? 이때 사용할 수 있는 것이 바로 리액트가 제공하는 <strong>memo</strong>입니다. <strong>memo</strong>는 <strong>Props</strong>를 얕은 비교하여 변경 여부에 따라 저장된 <strong>Fiber</strong>을 재사용합니다. &#x3C;Bar />을 <strong>memo</strong>을 통해 정의해서 사용한다면 &#x3C;Foo />의 상태가 아무리 변경되어도 <strong>memo</strong>를 통해 &#x3C;Bar />의 <strong>React Element</strong>를 재사용하기 때문에 렌더링 작업을 진행하지 않습니다.</p>\n<p><strong>memo</strong>는 얕은 비교를 사용하기에 개발자가 놓칠 수 있는 것이 하나 있습니다. 바로 JSX에서 <strong>Props</strong> 작성시 직접 정의하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>위 코드에서는 <code class=\"language-text\">onClick</code> 핸들러 함수가 매번 생성되기 때문에 <strong>memo</strong>가 전혀 동작하지 못합니다. 그렇다며 이를 어떻게 해결할 수 있을까요? 바로 이때 사용할 수 있는 것이 리액트의 <strong>useMemo()</strong>, <strong>useCallback()</strong>과 같은 Memoization 훅입니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>이 유의사항은 <strong>Context</strong>를 사용할 때 특히 중요합니다. <strong>Context</strong>를 소비하는 컴포넌트들은 <strong>Context</strong>의 값이 변경되면 <strong>memo</strong> 사용 여부와 상관없이 무조건적으로 리-렌더링됩니다. 그래서 <strong>Provider</strong>의 <code class=\"language-text\">value</code> 속성 값을 다음과 같이 정의하지 않도록 주의해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> FooContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Bad</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FooContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FooContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// Good</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FooContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FooContext.Provider</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>결과적으로 컴포넌트의 상태가 업데이트 되었을때 리-렌더링 대상은 <strong>Props</strong> 관련 최적화를 하지 않았다면 해당 컴포넌트를 기준으로 하위 트리는 모두 리-렌더링(렌더링 작업 대상)될 것입니다.</p>\n<h3 id=\"q-배열에-컴포넌트를-작성하면-key를-설정해야-한다고-합니다-key를-설정하지-않으면-어떠한-문제가-발생하는-것인가요\" style=\"position:relative;\"><a href=\"#q-%EB%B0%B0%EC%97%B4%EC%97%90-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B4-key%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4%EA%B3%A0-%ED%95%A9%EB%8B%88%EB%8B%A4-key%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EC%A7%80-%EC%95%8A%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%A0%ED%95%9C-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"q 배열에 컴포넌트를 작성하면 key를 설정해야 한다고 합니다 key를 설정하지 않으면 어떠한 문제가 발생하는 것인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 배열에 컴포넌트를 작성하면 key를 설정해야 한다고 합니다. key를 설정하지 않으면 어떠한 문제가 발생하는 것인가요?</h3>\n<p>리액트 렌더링 과정에는 <strong>재조정</strong>이라는 작업이 있습니다. 이는 이전 렌더링 결과와 현재 렌더링 결과를 비교하여 추가, 삭제 및 이동을 처리하는 작업입니다. 이 작업은 <code class=\"language-text\">beginWork()</code>에서 컴포넌트가 호출되어 자식 <strong>React Element</strong>를 반환한 직후, 해당 <strong>React Element</strong>를 기준으로 진행됩니다. </p>\n<p>이 재조정을 확인하기 위해 이전 섹션에서 멈추었던 렌더링 과정을 이어가 보겠습니다. &#x3C;Foo />가 반환되어 다시 <code class=\"language-text\">beginWork()</code>가 시작되면 다음의 로직이 실행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  renderLanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// 이하 Fiber 타입에 맞게 렌더링 작업 진행한다.</span>\n  <span class=\"token comment\">// 1 ~ 3 기준에 해당하지 않는다면 여기까지 도달할 수 없다.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> LazyComponent<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> FunctionComponent<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수형 컴포넌트 type은 개발자가 정의한 함수이다.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">updateFunctionComponent</span><span class=\"token punctuation\">(</span>\n        current<span class=\"token punctuation\">,</span>\n        workInProgress<span class=\"token punctuation\">,</span>\n        Component<span class=\"token punctuation\">,</span>\n        resolvedProps<span class=\"token punctuation\">,</span>\n        renderLanes<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> HostRoot<span class=\"token operator\">:</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">case</span> HostComponent<span class=\"token operator\">:</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiberBeginWork.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3812-L3826\">link</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateFunctionComponent</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">,</span>\n  Component<span class=\"token punctuation\">,</span>\n  nextProps<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  renderLanes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// Component(props, secondArg)와 같이 컴포넌트를 호출한다.</span>\n  nextChildren <span class=\"token operator\">=</span> <span class=\"token function\">renderWithHooks</span><span class=\"token punctuation\">(</span> \n    current<span class=\"token punctuation\">,</span>\n    workInProgress<span class=\"token punctuation\">,</span>\n    Component<span class=\"token punctuation\">,</span>\n    nextProps<span class=\"token punctuation\">,</span>\n    context<span class=\"token punctuation\">,</span>\n    renderLanes<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// current.child(fiber)와 nextChildren(React Element)을 비교하여 재조정을 진행한다.</span>\n  <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> nextChildren<span class=\"token punctuation\">,</span> renderLanes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactFiberBeginWork.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L965\">link</a></p>\n</blockquote>\n<p>재조정 작업에서 리액트는 이전 요소와 현재의 요소가 본질적으로 다른 요소인지 판단해야 하는데, 이때 사용되는게 컴포넌트의 <code class=\"language-text\">type</code>과 <code class=\"language-text\">key</code>입니다. <code class=\"language-text\">type</code>이 다르다는 것은 컴포넌트 자체가 다르다는 것이고, <code class=\"language-text\">key</code>가 다르다는 것은 <code class=\"language-text\">type</code>과 상관없이 개발자 정의에 의해 컴포넌트를 다르게 인식하는 것입니다. <code class=\"language-text\">type</code>이나 <code class=\"language-text\">key</code>가 다르면 다른 컴포넌트이기 때문에 <strong>Fiber</strong>을 새로 만들고 그렇지 않으면 <code class=\"language-text\">props</code>만 교체하여 <strong>current</strong>의 <strong>workInProgress</strong>을 만들어 반환합니다. 이때 사용되는 함수는 위에서 확인한 <code class=\"language-text\">createWorkInProgress()</code>입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  nextChildren<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  renderLanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> <span class=\"token function\">mountChildFibers</span><span class=\"token punctuation\">(</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      nextChildren<span class=\"token punctuation\">,</span>\n      renderLanes<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> <span class=\"token function\">reconcileChildFibers</span><span class=\"token punctuation\">(</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      current<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span>\n      nextChildren<span class=\"token punctuation\">,</span>\n      renderLanes<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reconcileSingleElement</span><span class=\"token punctuation\">(</span>\n  returnFiber<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span> <span class=\"token comment\">// parent Fiber</span>\n  child<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// current Fiber</span>\n  element<span class=\"token operator\">:</span> ReactElement<span class=\"token punctuation\">,</span> <span class=\"token comment\">// next child React Element</span>\n  lanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fiber <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이하 if문은 current Fiber와 next React Element의 정보를 가지고 서로 본질적으로 다른지 확인한다.</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> elementType <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>elementType <span class=\"token operator\">===</span> elementType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token comment\">// props만 갈아끼워 current의 workInProgress을 반환한다.</span>\n      <span class=\"token keyword\">const</span> existing <span class=\"token operator\">=</span> <span class=\"token function\">useFiber</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// createWorkInProgress</span>\n      existing<span class=\"token punctuation\">.</span>return <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> existing<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// type, key가 다르면 삭제 처리를 한다.</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// React Element을 Fiber만들어 반환한다.</span>\n  <span class=\"token keyword\">const</span> created <span class=\"token operator\">=</span> <span class=\"token function\">createFiberFromElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> returnFiber<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> lanes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  created<span class=\"token punctuation\">.</span>return <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> created<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>ReactChildFiber.js <a href=\"https://github.com/facebook/react/blob/v18.3.1/packages/react-reconciler/src/ReactChildFiber.new.js#L1137\">link</a></p>\n</blockquote>\n<p>리액트 팀은 ”<em>type이 달라지면 하위 구조도 다를 것이다</em>“라고 설명합니다. 이에 맞게 <code class=\"language-text\">createFiberFromElement()</code>를 통해 <strong>Fiber</strong>가 새로 만들어지면 해당 <strong>Fiber</strong>을 기준으로 하위 트리도 마찬가지로 모두 새것으로 교체됩니다. 왜냐하면 <strong>Fiber</strong>가 새로 만들어지면 트리 정보도 모두 <code class=\"language-text\">null</code>이 되면서 하위트리의 모든 요소의 <strong>current</strong>도 <code class=\"language-text\">null</code>이 됨을 의미하기 때문입니다. 새로 만들어져 반환된 <strong>Fiber</strong>는 <code class=\"language-text\">beginWork()</code>의 1번에 해당하여 렌더링 작업 대상이 되고, 이후 재조정 작업시 마찬가지로 하위 자식들도 이전 요소가 없기 때문에 <strong>Fiber</strong>을 재사용하는 게 아니라 새로 만들게 되는 상황이 계속 반복됩니다.</p>\n<p>예를 들어 &#x3C;Foo/>가 &#x3C;Baz> 로 변경된다면 다음과 같은 그림이 됩니다.\n<img src=\"https://github.com/user-attachments/assets/d38cb5c2-e29e-404a-b907-41b22005c32d\" alt=\"place-baz\"></p>\n<p>여기서 &#x3C;Baz /> 자식의 &#x3C;Bar />는 &#x3C;Foo/> 자식의 &#x3C;Bar/>와 <code class=\"language-text\">alternative</code>로 서로 참조하고 있는게 아닌 별개의 <strong>Fiber</strong>임을 이해하면 됩니다. </p>\n<p>재조정 작업에서 이처럼 컴포넌트 변경을 인식하면 삭제된 &#x3C;Foo/>를 부모인 &#x3C;App/> 기록해두고 이후 삭제를 처리할 때 &#x3C;App/>과 &#x3C;Foo/>의 연결을 끊는 등에 사용합니다. </p>\n<p>여기까지 이해하면 <code class=\"language-text\">key</code>로 인한 문제점이 발생할 수 있는 포인트를 설명할 수 있습니다. 배열은 기본적으로 요소들의 위치가 변경될 수 있음을 내포하고 있습니다. 문제는 같은 타입의 여러 컴포넌트를 <code class=\"language-text\">key</code> 없이 배열로 작성했다가 요소들의 위치를 변경 했을 때 발생합니다. </p>\n<p><code class=\"language-text\">key</code>가 없으면 기본적으로 <code class=\"language-text\">null</code>이 됩니다. 그리고 리액트는 해당 배열을 기준으로 재조정 작업을 진행할 때 <code class=\"language-text\">key</code>가 같으므로 이전 요소와 다음 요소가 실질적으로 다르지만 같다고 판단하여 이전 요소의 <strong>Fiber</strong>를 기준으로 <strong>workInProgress</strong>를 만듭니다. 이때 바로 문제가 발생합니다. <code class=\"language-text\">props</code>만 다음 요소의 <code class=\"language-text\">props</code>로 교체되기 때문에, 그 값을 반영한 UI는 정상적으로 보이지만 <strong>Fiber</strong>에 저장된 값(예: 컴포넌트의 상태)은 여전히 이전 요소의 값이므로 이를 기반으로 한 UI로 인해 사용자는 기대와는 다른 깨진 화면을 보게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">,</span> setNames<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNames</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">shift</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://github.com/user-attachments/assets/8504a19e-f902-4c07-a78b-79c333f24650\" alt=\"array-key\"></p>\n<h3 id=\"q-함수형-컴포넌트에서-라이프사이클과-같은-useeffect와-uselayouteffect는-언제-실행되고-차이점은-무엇인가요\" style=\"position:relative;\"><a href=\"#q-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4%EA%B3%BC-%EA%B0%99%EC%9D%80-useeffect%EC%99%80-uselayouteffect%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%8B%A4%ED%96%89%EB%90%98%EA%B3%A0-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"q 함수형 컴포넌트에서 라이프사이클과 같은 useeffect와 uselayouteffect는 언제 실행되고 차이점은 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 함수형 컴포넌트에서 라이프사이클과 같은 useEffect()와 useLayoutEffect()는 언제 실행되고 차이점은 무엇인가요?</h3>\n<p>지금까지 살펴본 렌더링 과정은 <strong>Render Phase</strong>라고 불리며, 업데이트가 반영된 트리가 완성되면 종료됩니다. 트리의 <strong>Fiber</strong>에는 이 과정에서 발생한 여러 <strong>Effect</strong>의 정보가 기록되어 있습니다. 이러한 <strong>Effect</strong>를 실행하여 <strong>DOM</strong>과 같은 외부 시스템과 동기화하는 부수 효과를 유발하는 과정을 <strong>Commit Phase</strong>라고 합니다. 이 단계는 중단, 재시작을 할 수 있는 <strong>Render Phase</strong>와는 다르게 항상 동기적으로 동작해야 합니다. 왜냐하면 순수하지 않은 단계이기 때문입니다.</p>\n<p>리액트의 렌더링은 순수해야 합니다. 렌더링은 언제든지 중지되었다가 재실행되거나 중단하고 다시 처음부터 실행될 수 있으므로 몇 번을 실행해도 결과는 같아야 합니다.  하지만 애플리케이션은 독립적으로 존재할 수 없습니다. 앱이 실행될 호스트 환경(예. <strong>DOM</strong>)이 있고 백엔드와 통신을 주고 받기도 합니다. 외부 시스템과의 상호작용은 순수하지 않지 않습니다. 하지만 이런 로직이 컴포넌트 내부에 작성될 수 밖에 없으며 이는 곧 렌더링 과정에서 해당 로직이 실행될 수 있음을 의미합니다. </p>\n<p>리액트는 렌더링을 순수하게 유지하기 위해 개발자에게 이러한 <strong>Effect</strong>을 작성할 수 있는 훅을 제공합니다. 대표적인 것이 바로 <code class=\"language-text\">useEffect()</code> 입니다. 참고로 사용자와의 상호작용과 같은 특정 이벤트에 의해 발생하는 부수 효과는 이벤트 핸들러에 작성하면 됩니다. <strong>Effect</strong>는 렌더링 주도하에 발생할 수 있는 외부 시스템과의 동기화와 관련된 부수 효과를 작성한다고 이해하면 됩니다. 이와 관련한 예시는 아래에서 다룹니다.</p>\n<p>리액트는 <strong>Commit Phase</strong>를 다음과 같이 세 단계로 분류하여 각 단계에 적합한 <strong>Effect</strong>를 처리합니다.</p>\n<ul>\n<li><strong>commitBeforeMutationEffects</strong>: <strong>DOM</strong>에 변형을 가하기 전 단계입니다. <code class=\"language-text\">getSnapshotBeforeUpdate()</code>와 같이 변형을 가하기 전 상태을 읽어 들이기 위한 단계입니다.</li>\n<li><strong>commitMutationEffects</strong>: <strong>DOM</strong>에 변형을 가하는 단계입니다. 컴포넌트는 필요에 따라 마운트, 언마운트를 하고 <strong>Host Component</strong>는 적절히 <strong>DOM</strong> 작업을 하는 단계입니다.</li>\n<li><strong>commitLayoutEffects</strong>: <strong>DOM</strong>에 변형이 가해진 이후의 단계입니다. 브라우저에 의해 페인트 되기 전 <strong>DOM</strong>의 레이아웃을 참조, 조작할 수 있는 단계입니다.</li>\n</ul>\n<p>이 단계가 완료되면 트리와 <strong>DOM</strong>의 동기화가 완료된 것으로 간주하여 <strong>Fiber Root Node</strong>의 <code class=\"language-text\">current</code>를 해당 트리의 <strong>Host Root Fiber</strong>로 교체합니다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/b583096d-8907-4ccf-8e1d-6c3026ffbff4\" alt=\"commit-tree\"></p>\n<p>이전 렌더링에서 제거된 &#x3C;Foo/> 트리는 <strong>commitMutationEffects</strong> 단계를 통해 연결 정보(<strong>Fiber</strong>와 <strong>DOM</strong>)가 모두 정리되면서 최종적으로 자연스레 GC됩니다.</p>\n<p><strong>Effect</strong>가 <strong>Commit Phase</strong>에서 처리 된다는 것은 확인했습니다. 그렇다면 <code class=\"language-text\">useEffect()</code>와 <code class=\"language-text\">useLayoutEffect()</code>의 차이점은 정확히 무엇일까요? 우선, 두 훅의 사용 목적을 이해하는 것이 중요합니다.</p>\n<ul>\n<li><strong>useLayoutEffect</strong>: DOM에 반영되었기 때문에 실행되어야 하는 <strong>Effect</strong>을 작성합니다.</li>\n<li><strong>useEffect</strong>: 화면이 사용자에게 보였기 때문에 실행되어야 하는 <strong>Effect</strong>을 작성합니다.</li>\n</ul>\n<p>미세한 차이가 있지만 결국 시점의 차이입니다. <code class=\"language-text\">useLayoutEffect()</code>는 <strong>DOM</strong> 조작 및 레이아웃 측정과 관련된 작업을 위해 사용하는데, 중요한 점은 <strong>DOM</strong> 변경으로 인한 페인트 이전에 실행된다는 것입니다. <code class=\"language-text\">useEffect()</code>는 일반적으로 페인트 이후에 실행됩니다. UI가 사용자에게 노출되었기 때문에 발생해야 하는 <strong>Effect</strong>을 위해 사용되는데, 예를 들어 채팅방이 노출되었기 때문에 소켓 연결을 진행하는 것과 같은 부수 효과를 의미합니다. 이를 잘 표현한 것이 다음의 다이어그램입니다.</p>\n<p><img src=\"https://raw.githubusercontent.com/donavon/hook-flow/master/hook-flow.png\" alt=\"commit-tree\"></p>\n<blockquote>\n<p>출처: <a href=\"https://github.com/donavon/hook-flow\">https://github.com/donavon/hook-flow</a></p>\n</blockquote>\n<blockquote>\n<p>useEffect()는 항상 페인트 이후에 실행되는 것은 아닙니다. 우선순위가 높은 사용자의 클릭과 같은 이벤트에서 발생한 업데이트는 즉각 사용자가 UI적으로 인식할 수 있어야 하기 때문에 useLayoutEffect()와 마찬가지로 페인트 이전에 실행됩니다. 이는 이번 글의 주제에서 벗어나기도 하고 특수하기 때문에 짧게 언급만 하고 넘어갑니다.</p>\n</blockquote>\n<p>다음의 코드는 <code class=\"language-text\">useEffect()</code>를 통해 레이아웃을 조작했을 때의 UI 플리커링을 재현합니다. 이를 통해 사용자는 어떤 경험을 하는지 확인해보면 둘의 차이를 좀 더 이해하기 쉽습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">,</span> setNames<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// or useLayoutEffect()</span>\n    ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>paddingTop <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>names<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        load\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>useLayout</strong><br>\n<img src=\"https://github.com/user-attachments/assets/58ea7b18-7f96-40e2-a558-eaca48bd1a33\" alt=\"useEffect\"><br>\n<strong>useLayoutEffect</strong><br>\n<img src=\"https://github.com/user-attachments/assets/5bf0610a-cd9f-4cb5-bd58-f0bb9602b7de\" alt=\"useLayoutEffect\"></p>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<p>여기까지 리액트의 기본 동작 방식을 확인해보았습니다. 이제 마지막으로 QnA을 작성하면서 마무리 하도록 하겠습니다.</p>\n<h4 id=\"q-리액트를-개발하다-보면-다음의-여러-타입을-접하게-됩니다-reactelement-exoticcomponent-reactnode가-정확히-무엇이고-차이점은-무엇인가요\" style=\"position:relative;\"><a href=\"#q-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EA%B0%9C%EB%B0%9C%ED%95%98%EB%8B%A4-%EB%B3%B4%EB%A9%B4-%EB%8B%A4%EC%9D%8C%EC%9D%98-%EC%97%AC%EB%9F%AC-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%91%ED%95%98%EA%B2%8C-%EB%90%A9%EB%8B%88%EB%8B%A4-reactelement-exoticcomponent-reactnode%EA%B0%80-%EC%A0%95%ED%99%95%ED%9E%88-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"q 리액트를 개발하다 보면 다음의 여러 타입을 접하게 됩니다 reactelement exoticcomponent reactnode가 정확히 무엇이고 차이점은 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 리액트를 개발하다 보면 다음의 여러 타입을 접하게 됩니다. ReactElement, ExoticComponent, ReactNode가 정확히 무엇이고 차이점은 무엇인가요?</h4>\n<p><strong>A.</strong> </p>\n<ul>\n<li><strong>ReactElement</strong>: JSX로 작성된 컴포넌트의 정보를 객체로 나타내며, 컴포넌트 타입, props, key, ref 등을 포함하여 리액트 앱의 구조를 모델링한다.</li>\n<li><strong>ExoticComponent</strong>: 리액트의 <code class=\"language-text\">memo</code>, <code class=\"language-text\">lazy</code> 등 내부적을 정의된 특수한 기능을 가진 컴포넌트로, 일반 컴포넌트를 감싸서 렌더링 과정에서 특별한 역할을 한다.</li>\n<li><strong>ReactNode</strong>: 리액트가 렌더링할 수 있는 모든 것을 포함하는 타입이다.</li>\n</ul>\n<h4 id=\"q-react-dom의-createrootrender의-역할은-무엇이고-뒤에서는-어떠한-일들이-일어나고-있나요-1\" style=\"position:relative;\"><a href=\"#q-react-dom%EC%9D%98-createrootrender%EC%9D%98-%EC%97%AD%ED%95%A0%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EB%92%A4%EC%97%90%EC%84%9C%EB%8A%94-%EC%96%B4%EB%96%A0%ED%95%9C-%EC%9D%BC%EB%93%A4%EC%9D%B4-%EC%9D%BC%EC%96%B4%EB%82%98%EA%B3%A0-%EC%9E%88%EB%82%98%EC%9A%94-1\" aria-label=\"q react dom의 createrootrender의 역할은 무엇이고 뒤에서는 어떠한 일들이 일어나고 있나요 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. React DOM의 createRoot(..).render(…)의 역할은 무엇이고 뒤에서는 어떠한 일들이 일어나고 있나요?</h4>\n<p><strong>A.</strong> </p>\n<ul>\n<li><strong>createRoot</strong>: 최상단 <strong>Fiber Root Node</strong>를 생성하여 트리 전반의 정보를 관리하며, 실제 컨테이너 HTML 엘리먼트를 저장한다.</li>\n<li><strong>render()</strong>: <strong>Host Root Fiber</strong>에서 시작하는 렌더링 과정이 시작되고 <strong>React Element을</strong> Fiber 트리로 구성한다.</li>\n</ul>\n<h4 id=\"q-컴포넌트의-상태를-업데이트-했을-때-어떻게-리-렌더링되나요-상태가-변경된-컴포넌트만-리-렌더링-되나요-1\" style=\"position:relative;\"><a href=\"#q-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%96%88%EC%9D%84-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A6%AC-%EB%A0%8C%EB%8D%94%EB%A7%81%EB%90%98%EB%82%98%EC%9A%94-%EC%83%81%ED%83%9C%EA%B0%80-%EB%B3%80%EA%B2%BD%EB%90%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A7%8C-%EB%A6%AC-%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%90%98%EB%82%98%EC%9A%94-1\" aria-label=\"q 컴포넌트의 상태를 업데이트 했을 때 어떻게 리 렌더링되나요 상태가 변경된 컴포넌트만 리 렌더링 되나요 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 컴포넌트의 상태를 업데이트 했을 때 어떻게 리-렌더링되나요? 상태가 변경된 컴포넌트만 리-렌더링 되나요?</h4>\n<p><strong>A.</strong> </p>\n<ul>\n<li>컴포넌트의 상태가 업데이트되면 해당 컴포넌트부터  <strong>Host Root Fiber</strong>까지 업데이트 표식을 남기고 다시 렌더링이 시작된다.</li>\n<li>리액트는 current의 존재 여부, <code class=\"language-text\">props</code>의 변경과 업데이트 표시를 기반으로 실제 렌더링 작업을 수행할 대상을 선택한다.</li>\n</ul>\n<h4 id=\"q-배열에-컴포넌트를-작성하면-key를-설정해야-한다고-합니다-key를-설정하지-않으면-어떠한-문제가-발생하는-것인가요-1\" style=\"position:relative;\"><a href=\"#q-%EB%B0%B0%EC%97%B4%EC%97%90-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B4-key%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4%EA%B3%A0-%ED%95%A9%EB%8B%88%EB%8B%A4-key%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EC%A7%80-%EC%95%8A%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%A0%ED%95%9C-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80%EC%9A%94-1\" aria-label=\"q 배열에 컴포넌트를 작성하면 key를 설정해야 한다고 합니다 key를 설정하지 않으면 어떠한 문제가 발생하는 것인가요 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 배열에 컴포넌트를 작성하면 key를 설정해야 한다고 합니다. key를 설정하지 않으면 어떠한 문제가 발생하는 것인가요?</h4>\n<p><strong>A.</strong> 같은 컴포넌트를 key 없이 배열로 렌더링하면 위치 이동시 type과 key(null)가 같기 때문에 props만 교체하고 Fiber는 그대로 사용된다. 이로 인해 사용자는 props를 반영한 UI는 정상적으로 보이지만, Fiber 값(예: 컴포넌트 상태 등)을 사용하는 UI는 위치가 바뀌지 않은 것처럼 보이게 된다.</p>\n<h4 id=\"q-함수형-컴포넌트에서-라이프사이클과-같은-useeffect와-uselayouteffect는-언제-실행되고-차이점은-무엇인가요-1\" style=\"position:relative;\"><a href=\"#q-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4%EA%B3%BC-%EA%B0%99%EC%9D%80-useeffect%EC%99%80-uselayouteffect%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%8B%A4%ED%96%89%EB%90%98%EA%B3%A0-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94-1\" aria-label=\"q 함수형 컴포넌트에서 라이프사이클과 같은 useeffect와 uselayouteffect는 언제 실행되고 차이점은 무엇인가요 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 함수형 컴포넌트에서 라이프사이클과 같은 useEffect()와 useLayoutEffect()는 언제 실행되고 차이점은 무엇인가요?</h4>\n<p><strong>A.</strong> Effect는 렌더링 완료 후 DOM에 반영하는 <strong>Commit Phase</strong> 또는 그 이후에 실행된다. </p>\n<ul>\n<li><strong>useLayoutEffect</strong>:  DOM 변형 후, 브라우저가 다시 페인트하기 전에 동기적으로 실행되어 DOM 측정 및 조작을 위해 주로 사용되며, UI의 플리커링을 방지할 수 있는 효과를 가진다.</li>\n<li><strong>useEffect</strong>: 브라우저가 화면에 변경 사항을 랜더링하고 난 후 실행되는데, 주로 외부 시스템과의 동기화를 위해 사용한다.</li>\n</ul>","frontmatter":{"title":"리액트 훑어보기 - 리액트 QnA, 근데 이제 내부동작을 곁들인","date":"2024-12-13","keywords":["리액트","react"]}}},"pageContext":{"slug":"/react/react-qna/","previous":{"fields":{"slug":"/react/noti/"},"frontmatter":{"title":"2차 창작물에 대해서(유튜브, 블로그)","category":"기타"}},"next":null}},"staticQueryHashes":["2277278352","536400264"]}