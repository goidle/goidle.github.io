<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Deep Dive Magic Code]]></title><description><![CDATA[Deep dive magic code]]></description><link>https://github.com/goidle</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 25 Dec 2019 04:34:39 GMT</lastBuildDate><item><title><![CDATA[Redux 톺아보기]]></title><description><![CDATA[혹시 궁금해봤니❓ Redux를 사용하면서 다음과 같은 물음을 가진 경험이 있습니까? 나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것
일까? redux…]]></description><link>https://github.com/goidle/redux/in-depth-redux/</link><guid isPermaLink="false">https://github.com/goidle/redux/in-depth-redux/</guid><pubDate>Wed, 25 Dec 2019 22:40:13 GMT</pubDate><content:encoded>&lt;h2 id=&quot;혹시-궁금해봤니&quot;&gt;&lt;a href=&quot;#%ED%98%B9%EC%8B%9C-%EA%B6%81%EA%B8%88%ED%95%B4%EB%B4%A4%EB%8B%88&quot; aria-label=&quot;혹시 궁금해봤니 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;혹시 궁금해봤니❓&lt;/h2&gt;
&lt;p&gt;Redux를 사용하면서 다음과 같은 물음을 가진 경험이 있습니까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것
일까?&lt;/li&gt;
&lt;li&gt;redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것일까?&lt;/li&gt;
&lt;li&gt;reducer에서 반환하는 값을 왜 항상 새로 만들어야 하는 것일까? 순수함수는 무엇인가?&lt;/li&gt;
&lt;li&gt;redux state가 변경되면 모든 컴포넌트가 re-render 되는가? 아니면 해당 변경된 데이터를 참조하고 있는 컴포넌트만 re-render 되는가? 후자라면 이 또한 어떻게 그 컴포넌트만을 찾아서 re-render 시키는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 물음을 한 적이 없다면 혹은 &lt;strong&gt;&lt;em&gt;“뭐 뒤에서 알아서 해주겠지 이건 매직 코드야”&lt;/em&gt;&lt;/strong&gt;라고 생각만 했다면 이참에 글쓴이와 함께 오픈소스를 분석하면서 이런 물음에 답을 찾음과 동시에 매직 코드에 대한 막연함, 두려움을 없애고 단순 라이브러리 개발자가 아닌 진짜 생각하는 개발자, 스스로 발전할 수 있는 개발자가 되기 위한 기초를 다질 수 있는 능력을 함께 길러갔으면 좋겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;해당 포스트에서 언급하는 코드들은 많은 부분이 생략된 코드 스니펫이므로 전체 코드는 &lt;a href=&quot;https://github.com/reduxjs/redux&quot;&gt;Redux Github&lt;/a&gt;에서 확인해 보실 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-나는-액션을-dispatch만-하였는데-redux는-어떻게-알고-뒤에서-middleware를-실행하는-것일까&quot;&gt;&lt;a href=&quot;#1-%EB%82%98%EB%8A%94-%EC%95%A1%EC%85%98%EC%9D%84-dispatch%EB%A7%8C-%ED%95%98%EC%98%80%EB%8A%94%EB%8D%B0-redux%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%95%8C%EA%B3%A0-%EB%92%A4%EC%97%90%EC%84%9C-middleware%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;1 나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것일까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것일까❓&lt;/h2&gt;
&lt;p&gt;들어가기에 앞서 하나 미리 짚어가야할 점은 middleware 형태는 다음과 같이 약속되어 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;middleware&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* something.. */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 섹션의 최종 목적은 위 middleware의 인자들이 언제 소비되는지 알아보는 것입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;위와 같은 형식을 &lt;strong&gt;Currying&lt;/strong&gt;이라 부릅니다.&lt;br&gt;
필요한 데이터를 클로저를 이용하여 각각의 의미가 있는 함수에 인자로 잡아두고 &lt;strong&gt;lazy execution&lt;/strong&gt;하는 방식으로 자세한 설명은 넘어가지만, 반드시 따로 찾아보시기 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redux의 middleware는 어떻게 동작하는 것일까?&lt;br&gt;
이 물음의 해답을 찾아가기 위해서는 middleware를 맨 처음 사용하는 &lt;a href=&quot;https://github.com/reduxjs/redux/blob/master/src/applyMiddleware.ts&quot;&gt;applyMiddleware&lt;/a&gt; 함수를 먼저 볼 필요가 있습니다.
우리가 들여다봐야 할 코드는 다음 두 줄입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;middlewares&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; middlewareAPI &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    getState&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;action&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middlewares&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;middleware&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middlewareAPI&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  dispatch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;chain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    dispatch
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 시작은 &lt;code class=&quot;language-text&quot;&gt;middlewareAPI&lt;/code&gt;를 모든 middleware &lt;code class=&quot;language-text&quot;&gt;({ dispatch, getState }) =&amp;gt;&lt;/code&gt;에 넘겨주어 redux의 핵심 기능을 middleware에서 사용 할 수 있도록 해줍니다.&lt;br&gt;
&lt;a href=&quot;https://github.com/reduxjs/redux-thunk/blob/master/src/index.js#L4&quot;&gt;redux-thunk&lt;/a&gt;의 경우 넘겨준 위 &lt;code class=&quot;language-text&quot;&gt;dispatch&lt;/code&gt;를 이용하여 비동기 처리를 합니다.  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;compose&lt;/code&gt;는 함수를 합성하는데 이는 javascript function이 first-class objects인 점을 활용한 방법으로 함수형에서 많이 사용합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;first-class&quot;&gt;&lt;a href=&quot;#first-class&quot; aria-label=&quot;first class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;first-class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;변수에 할당할 수 있다.&lt;/li&gt;
&lt;li&gt;함수의 인자값으로 전달 할 수 있다.&lt;/li&gt;
&lt;li&gt;함수의 반환 값으로 반환할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;또한 decorator패턴 입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이 패턴은 변경에는 닫혀 있고 확장에는 열려 있는 원칙이 묻어 있는 패턴입니다.
기능 추가에 기존 코드 변경이 필요가 없으며 기능을 무한히 추가할 수 있습니다.
middleware를 추가함에 있어 redux 코드에 전혀 영향이 가지 않고 변경 또한 필요하지 않습니다.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;넘겨준 middleware가 &lt;code class=&quot;language-text&quot;&gt;compose&lt;/code&gt;안에서 어떻게 합성되는지 알아보겠습니다. 이런 방식이 익숙지 않은 분들은
머리가 조금 아플수도 있습니다. 하지만 하나씩 찬찬히 뜯어볼 생각이므로 포기하지 마시길 바랍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;middlewares&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; middlewares&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드는 간단해 보입니다.&lt;br&gt;
여기서 middleware의 &lt;code class=&quot;language-text&quot;&gt;(next) =&amp;gt;&lt;/code&gt;가 소비됩니다. 예로 [a, b, c] middleware가 있다면 &lt;code class=&quot;language-text&quot;&gt;a(b(c()))&lt;/code&gt;의 형태로 만들어 주면서 next를 다음 middleware로 할당합니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;compose&lt;/code&gt;가 끝난 형태는 &lt;code class=&quot;language-text&quot;&gt;(...args) =&amp;gt; a(b(c(...args)))&lt;/code&gt;가 됩니다.
더 정확하게는 &lt;code class=&quot;language-text&quot;&gt;(...args) =&amp;gt; f&amp;#39;(c(...args))&lt;/code&gt;이며 f’는 &lt;code class=&quot;language-text&quot;&gt;(c반환 값) =&amp;gt; a(b(c반환 값))&lt;/code&gt;가 됩니다.  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;compose&lt;/code&gt;가 반환한 함수의 형태를 보면 실행하기 전까지 &lt;code class=&quot;language-text&quot;&gt;(next) =&amp;gt;&lt;/code&gt;가 소비되지 않는 형태입니다. &lt;code class=&quot;language-text&quot;&gt;compose(...chain)(store.dispatch)&lt;/code&gt;를 통해 store의 dispatch를 넘겨주는데 이때 맨 마지막 middleware의 next를 dispatch로 할당하면서 도화선처럼 나머지의 middleware &lt;code class=&quot;language-text&quot;&gt;(next) =&amp;gt;&lt;/code&gt;도 연달아 소비시킵니다.&lt;/p&gt;
&lt;p&gt;c middleware의 next는 store의 dispatch인 걸 주목합니다. 즉 &lt;u&gt;&lt;strong&gt;우리가 쓰는 dispatch는 middleware가 층층이 겹쳐져 있는 함수이지 redux의 dispatch가 아닙니다😲&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;그리고 우리가 dispatch를 이용하여 Action을 날릴 때 비로소 &lt;code class=&quot;language-text&quot;&gt;(action) =&amp;gt;&lt;/code&gt;가 소비 됩니다. 계속해서 next(action)를 전달하면 위에서 currying하여 잡아둔 다음 middleware의 &lt;code class=&quot;language-text&quot;&gt;(action) =&amp;gt;&lt;/code&gt;를 소비하게 되는 것이고 마지막 middleware의 next는 redux의 dispatch이기 때문에 최종적으로 redux에 action이 도달하게 됩니다.&lt;/p&gt;
&lt;p&gt;누군가가 나에게 다음과 같은 질문을 한다고 생각해 봅시다.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;“액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 건가요?”&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
네. 지금 보니 간단한 질문이네요&lt;/p&gt;
&lt;h2 id=&quot;2-redux는-전달해준-액션을-어떻게-내가-원하는-reducer에-전달해주는-것-일까&quot;&gt;&lt;a href=&quot;#2-redux%EB%8A%94-%EC%A0%84%EB%8B%AC%ED%95%B4%EC%A4%80-%EC%95%A1%EC%85%98%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%82%B4%EA%B0%80-%EC%9B%90%ED%95%98%EB%8A%94-reducer%EC%97%90-%EC%A0%84%EB%8B%AC%ED%95%B4%EC%A3%BC%EB%8A%94-%EA%B2%83-%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;2 redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것 일까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것 일까❓&lt;/h2&gt;
&lt;p&gt;이번에도 역시 reducer가 가장 먼저 쓰이는 &lt;a href=&quot;https://github.com/reduxjs/redux/blob/master/src/combineReducers.ts#L139&quot;&gt;combineReducers&lt;/a&gt; 부터 들여다 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;combineReducers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;reducers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; finalReducers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; reducerKeys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reducerKeys&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; reducers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;function&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      finalReducers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reducers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; finalReducerKeys &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;finalReducers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;combination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* something.. */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reducer의 최소 조건인 function을 검증하면서 key를 잡고 있습니다. 이는 추후에 reducer의 이름, 다시 말해 redux의 state 객체의 각 property 이름이 바로 &lt;code class=&quot;language-text&quot;&gt;combineReducers&lt;/code&gt;에 넘겨주는 객체의 key에 의해 정해집니다.  &lt;/p&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-text&quot;&gt;combination&lt;/code&gt; 함수를 반환해 줍니다. &lt;code class=&quot;language-text&quot;&gt;combineReducers&lt;/code&gt; 코드는 환경설정이라 할 수 있고 실 기능은 &lt;code class=&quot;language-text&quot;&gt;combination&lt;/code&gt;이 담당하고 있으며 이는 redux내부에서 사용되어 집니다. 이렇게 코드가 나누어져 있는 이유는 무엇일까요?  &lt;/p&gt;
&lt;p&gt;코드의 성질과 역할이 달라서 격리했다고 생각합니다. 역할별로 나누어서 한번 정해지면 변경될 일이 없는 부분과 요구 사항에 따라 추가 변경이 일어날 확률이 높고 주입되는 상태가 언제든지 변경될 수 있으며 재사용이 높은 부분을 나누었다고 볼 수 있습니다. 분명 이렇게 나누지 않았다면 변경될 확률이 낮은 코드들이 자주 변경되는 코드와 혼재되어 변경에 영향을 받는 코드의 범위가 커지면서 버그, 테스트, 유지보수 등 여러 면에서 좋지 않습니다.
이런 역할, 변화에 따른 격리는 여러 오픈소스를 보면 자주 보이는 형식으로 역할 모델별로 나누는 연습을 많이 해야 합니다.&lt;/p&gt;
&lt;p&gt;그러면 이 함수가 사용되는 곳은 어디일까요?
redux의 dispatch에서 사용됩니다. action을 dispagch에 담아 보내면 &lt;u&gt;middleware -&gt; redux dispatch -&gt; reducer의 순서로 흐릅니다.&lt;/u&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;combination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hasChanged &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nextState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; finalReducerKeys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; finalReducerKeys&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reducer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; finalReducers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; previousStateForKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nextStateForKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;previousStateForKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;    nextState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nextStateForKey
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    hasChanged &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hasChanged &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; nextStateForKey &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; previousStateForKey &lt;span class=&quot;token comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  hasChanged &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hasChanged &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; finalReducerKeys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; hasChanged &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; nextState &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보이시나요? 모든 reducer를 돌면서 state와 action을 던져줍니다(1, 2). 그리고 변경이 적용되기 위해선 객체를 새로 만들어야 하는 이유도 보입니다(3).
자신이 처리하지 않는 action의 경우 그저 default(switch의 경우)의 반환 값이 반환될 것입니다. 그다음 변경 여부는 값이 아닌 reference 비교로 결정됩니다.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;“reference로 변경 여부를 결정 하므로 항상 새로운 객체를 반환해야 해!”&lt;/em&gt;&lt;/strong&gt;라고 여기까지만 생각하고 개발하는 것은 2%가 부족합니다.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;“왜?”&lt;/em&gt;&lt;/strong&gt;가 빠져있습니다. redux는 왜 직접 데이터를 변경하지 않고 새로운 객체를 만들까? 그게 더 비용이 들지는 않을까? 여기에 대한 대답은 &lt;strong&gt;순수함수&lt;/strong&gt;에서 스스로 찾아보세요!  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;순수함수를 쓰는 이유 중 하나는 객체의 투 포인터 참조에서 오는 데이터 공유 때문 입니다.
단순 변수만을 참조하는 원 포인터 참조는 기존 데이터 변경에 영향을 받지 않습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
bar &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; foo &lt;span class=&quot;token comment&quot;&gt;// false;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;하지만 투 포인터 참조를 할 경우 그렇지 않습니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;f&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
bar&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;f&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;당연한 얘기 같습니다. 여기서 중요한 점은 foo를 여러 곳에서 물고 있으면 foo의 데이터 변경이 어느 곳에 여파를 미치는지 예측할 수 없습니다.
하지만 새로운 객체를 만들어 데이터 변경을 적용하게 되면 기존에 foo를 물고 있던 곳에 영향을 주지 않습니다. 더불어 그 변경의 여파는 새로운 데이터를 반환받아 적용한 곳부터 시작하기 때문에 추적 또한 용이합니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“redux는 전달해준 액션을 어떻게 해당 액션을 처리하는 reducer에 전달해주는 것일까?”&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
여기에 대한 대답은 &lt;u&gt;해당 action을 처리하는 reducer에게만 넘겨주는 게 아니라 모든 reducer에게 액션을 던진다입니다.&lt;/u&gt;&lt;br&gt;
또한 &lt;strong&gt;&lt;em&gt;“reducer에서 반환하는 값을 왜 항상 새로 만들어야 하는 것일까? 순수함수는 무엇인가?”&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
여기에 대한 대답도 할 수 있겠네요😀  &lt;/p&gt;
&lt;h2 id=&quot;3-redux-state가-변경되면-모든-컴포넌트들이-re-render되는가&quot;&gt;&lt;a href=&quot;#3-redux-state%EA%B0%80-%EB%B3%80%EA%B2%BD%EB%90%98%EB%A9%B4-%EB%AA%A8%EB%93%A0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%93%A4%EC%9D%B4-re-render%EB%90%98%EB%8A%94%EA%B0%80&quot; aria-label=&quot;3 redux state가 변경되면 모든 컴포넌트들이 re render되는가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. redux state가 변경되면 모든 컴포넌트들이 re-render되는가❓&lt;/h2&gt;
&lt;p&gt;마지막 섹션입니다. 코드는 &lt;a href=&quot;https://github.com/reduxjs/react-redux/tree/master/src&quot;&gt;react-redux&lt;/a&gt;에서 확인해 보실 수 있습니다.
해당 부분은 class와 funcitonal component에 따라 봐야할 부분이 다르기 때문에 최근에 대두되는 hook을 기준으로 분석해 보겠습니다.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;해당 섹션은 hook을 중심으로 이야기 합니다. hook을 모르신다면 먼저 &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;Hooks&lt;/a&gt;를 보고오시기 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;어디서 부터 접근해야 할 까요? class의 경우 component와의 접점인 connect부터 접근했겠지만 hook은 그런 부분이 없습니다. 그렇다면 그나마 데이터에 접근하는 useSelector가 가장 유력해 보입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;selector&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; equalityFn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; refEquality&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; subscription&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; contextSub &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReduxContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelectorWithStoreAndSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    selector&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    equalityFn&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    contextSub
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useSelector&lt;/code&gt;의 두 번째 인자로 비교 함수를 전달해줄 수 있습니다. 기본적으로 shallow compare이며 성능 최적화 등 특정 케이스에서 유용하게 사용될 수 있기 때문에 알아두면 좋습니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;useReduxContext&lt;/code&gt;는 context API를 이용하여 redux의 store와 &lt;strong&gt;observer 패턴&lt;/strong&gt; 을 구현한 Subscription 객체를 전달받습니다. 요놈들의 데이터를 넣어주는 context는 어디에 있느냐? 바로 우리가 쓰는 &lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt; 컴포넌트에 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subscription &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; ReactReduxContext
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Provider value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; subscription&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Context는 &lt;a href=&quot;https://ko.reactjs.org/docs/context.html&quot;&gt;링크&lt;/a&gt;를 통해 정확히 알고 가는 게 좋습니다. 활용도가 매우 다양하며 여러분들이 알게 모르게 라이브러리를 통해 이미 쓰고 있어서 분석에 많은 도움이 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;useSelector의 &lt;code class=&quot;language-text&quot;&gt;useSelectorWithStoreAndSubs&lt;/code&gt;를 살펴보기에 앞서 위에 언급한 Subscription을 먼저 봐야 합니다. redux store의 state가 변경되면 redux는 자신을 subscribe하고 있는 listener들을 전부 실행 시켜 줍니다. react-redux는 react와 redux를 연결하기 위해 observable, observer 두 가지 역할을 가진 Subscription을 구현하여 redux 상태 변경을 subscribe 함과 동시에 자신을 subscribe하고 있는 listener를 가지고 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;handleChangeWrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onStateChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onStateChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;trySubscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unsubscribe&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unsubscribe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;handleChangeWrapper&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// usage&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subscription &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
subscription&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onStateChange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; checkForUpdates
subscription&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trySubscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;trySubscribe&lt;/code&gt;를 통해 store를 subscribe하고 store의 state가 변경되면 &lt;code class=&quot;language-text&quot;&gt;onStateChange&lt;/code&gt;를 실행해 줍니다. 계층 구조 전파를 위한 코드들이 빠져 있는 스니펫이므로 궁금하시면 직접 확인해 보시기 바랍니다.&lt;br&gt;
드디어 핵심인 &lt;code class=&quot;language-text&quot;&gt;useSelectorWithStoreAndSubscription&lt;/code&gt;를 살펴보기 위한 준비과정이 끝났습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelectorWithStoreAndSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; forceRender&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; latestSelector &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; latestSelectedState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;forceRender&lt;/code&gt;는 component를 강제로 re-render시키기 위한 방법중 하나 입니다. useState를 사용할 수도 있습니다. 그리고 selector와 그 결괏값인 state를 cache 하기 위해 변수를 할당합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelectorWithStoreAndSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    selector &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; latestSelector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;/span&gt;    latestSubscriptionCallbackError&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    selectedState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    selectedState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; latestSelectedState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useIsomorphicLayoutEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    latestSelector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; selector
    latestSelectedState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; selectedState
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;강조된 부분을 봤을 때 어떤 생각이 드시나요?&lt;br&gt;
&lt;strong&gt;&lt;em&gt;“잘못 사용하면 ref의 cache 이점을 전혀 못 누리겠구나”&lt;/em&gt;&lt;/strong&gt; 라고 생각이 드시나요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대부분 이렇게 사용하실 겁니다. foo를 select 하는 callback은 항상 새로 만들어지는 함수입니다.&lt;br&gt;
그렇기 때문에 &lt;code class=&quot;language-text&quot;&gt;selector !== latestSelector.current&lt;/code&gt;는 항상 true가 될 것이고 컴포넌트가 re-render 될 때마다 selector는 매번 실행될 겁니다. 간단한 selector의 경우별 차이가 없겠지만 복잡한 연산이 필요한 selector의 경우 불필요한 연산을 추가로 하게 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;selectFoo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;selectFoo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Component가 아무리 re-render 돼도 selectFoo는 항상 같기 때문에 이미 구해놓은 &lt;code class=&quot;language-text&quot;&gt;latestSelectedState.current&lt;/code&gt;를 사용할 수 있습니다.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;selector가 항상 이렇게 간단하지만은 않죠? 외부 인자에 의존할 경우 다른 방법을 강구해야 합니다.
이와 관련하여 이미 아주 좋은 &lt;a href=&quot;https://github.com/reduxjs/reselect#readme&quot;&gt;라이브러리(reselect)&lt;/a&gt;가 있습니다.
이참에 reselect가 어떻게 결괏값을 memoize 하는지 알아보는 것부터 시작하는 것도 좋습니다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelectorWithStoreAndSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;checkForUpdates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newSelectedState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; latestSelector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equalityFn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newSelectedState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; latestSelectedState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    latestSelectedState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newSelectedState
    &lt;span class=&quot;token function&quot;&gt;forceRender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;checkForUpdates&lt;/code&gt;에서는 selector를 실행하고 값이 변경되었는지 확인 후 변경된 state를 cache하고 &lt;code class=&quot;language-text&quot;&gt;forceRender&lt;/code&gt;를 통해 강제로 컴포넌트를 re-render 시킵니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelectorWithStoreAndSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 생략..&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;checkForUpdates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* 생략.. */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  subscription&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onStateChange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; checkForUpdates
  subscription&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trySubscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;checkForUpdates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; selectedState
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;trySubscribe&lt;/code&gt;를 통해 store의 state 변경을 감지하고 변경 될 경우 &lt;code class=&quot;language-text&quot;&gt;checkForUpdates&lt;/code&gt;를 실행하기 위해 &lt;code class=&quot;language-text&quot;&gt;onStateChange&lt;/code&gt;에 할당합니다.&lt;/p&gt;
&lt;p&gt;다시 정리하자면 redux는 store의 state가 변경되면 모든 subscriber를 실행합니다. 컴포넌트에서 useSelector를 실행하면 store를 subscribe하게 됩니다. useSelector를 통해 등록한 checkForUpdates에서 selector가 반환한 값과 cache 된 값을 비교하여 변경된 경우 해당 컴포넌트를 re-render 시키고 그렇지 않을경우 re-render없이 checkForUpdates 함수만 실행되는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“redux state가 변경되면 모든 컴포넌트가 re-render 되는가?”&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;그렇지않다. useSelector를 사용한 컴포넌트 중 selector에서 반환한 값이 변경된 component만 re-render된다&lt;/u&gt; 입니다.&lt;/p&gt;
&lt;p&gt;드디어 다 끝났습니다.&lt;br&gt;
글로 풀어 쓸려니 많아 보이고 복잡해 보이지만 코드만 보면 별거 없습니다.
여러분이 익숙지 않아서일 수도 있고 제가 글솜씨가 드럽게 없어서 그럴지도 모릅니다.
하지만 분명한 건 우리가 쓰는 모든 라이브러리는 모두가 다 아는 Javascript로 구현되어 있고 매직 코드란 없다는 겁니다.&lt;br&gt;
라이브러리를 개발하지는 못하더라도 적어도 우리가 쓰는 라이브러리가 대충 어떻게는 돌아가는지 알고 있어야 덜 기분 나쁘지 않겠습니까?&lt;br&gt;
이만~🖐🏻&lt;/p&gt;</content:encoded></item><item><title><![CDATA[about]]></title><description><![CDATA[Your name Thank you for reading my resume. If you want to contact me, Please send me an email.]]></description><link>https://github.com/goidle/resume-en/</link><guid isPermaLink="false">https://github.com/goidle/resume-en/</guid><pubDate>Sun, 27 Jan 2019 16:21:13 GMT</pubDate><content:encoded>&lt;h1 id=&quot;your-name&quot;&gt;&lt;a href=&quot;#your-name&quot; aria-label=&quot;your name permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Your name&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;&lt;em&gt;Thank you for reading my resume. If you want to contact me, Please send me an email.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>