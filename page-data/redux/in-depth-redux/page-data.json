{"componentChunkName":"component---src-templates-blog-post-js","path":"/redux/in-depth-redux/","result":{"data":{"site":{"siteMetadata":{"title":"Deep Dive Magic Code","author":"Goidle","comment":{"utterances":"goidle/goidle.github.io"}}},"markdownRemark":{"id":"192eaabb-ea84-582b-ab62-9c784d421fbe","excerpt":"혹시 궁금해봤니❓ Redux를 사용하면서 다음과 같은 물음을 가진 경험이 있습니까? 나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것\n일까?   redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것 일까? reducer에서 반환하는 값을 왜 항상 새로 만들어아 햐는 것일까? 순수함수는 무엇인가? redux state가 변경되면 모든 컴포넌트들이 re-render…","html":"<h2 id=\"혹시-궁금해봤니\"><a href=\"#%ED%98%B9%EC%8B%9C-%EA%B6%81%EA%B8%88%ED%95%B4%EB%B4%A4%EB%8B%88\" aria-label=\"혹시 궁금해봤니 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>혹시 궁금해봤니❓</h2>\n<p>Redux를 사용하면서 다음과 같은 물음을 가진 경험이 있습니까?</p>\n<ul>\n<li>나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것\n일까?  </li>\n<li>redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것 일까?</li>\n<li>reducer에서 반환하는 값을 왜 항상 새로 만들어아 햐는 것일까? 순수함수는 무엇인가?</li>\n<li>redux state가 변경되면 모든 컴포넌트들이 re-render되는가? 아니면 해당 변경된 데이터를 참조하고 있는 컴포넌트만 re-render되는가? 후자라면 이 또한 어떻게 그 컴포넌트만을 찾아서 re-render 시키는가?</li>\n</ul>\n<p>이런 물음을 한적이 없다면 혹은 <strong><em>“뭐 뒤에서 알아서 해주겠지 이건 매직코드야”</em></strong>라고 생각만 했다면 이참에 글쓴이와 함께 오픈소스를 분석하면서 이런 물음에 답을 찾음과 동시에 매직코드에 대한 막연함, 두려움을 없애고 단순 라이브러리 개발자가 아닌 진짜 생각하는 개발자, 스스로 발전할 수 있는 개발자가 되기 위한 기초를 다질 수 있는 능력을 함께 길러갔으면 좋겠습니다.</p>\n<blockquote>\n<p>해당 포스트에서 언급하는 코드들은 Redux 오픈소스에 대한 설명이기 때문에 <a href=\"https://github.com/reduxjs/redux\">Redux Github</a>에서 다운받아 보실 수 있습니다.</p>\n</blockquote>\n<h2 id=\"1-나는-액션을-dispatch만-하였는데-redux는-어떻게-알고-뒤에서-middleware를-실행하는-것일까\"><a href=\"#1-%EB%82%98%EB%8A%94-%EC%95%A1%EC%85%98%EC%9D%84-dispatch%EB%A7%8C-%ED%95%98%EC%98%80%EB%8A%94%EB%8D%B0-redux%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%95%8C%EA%B3%A0-%EB%92%A4%EC%97%90%EC%84%9C-middleware%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C\" aria-label=\"1 나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것일까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 나는 액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 것일까❓</h2>\n<p>redux의 middleware는 어떻게 동작하는 것 일까?<br>\n이 물음의 해답을 찾아가기 위해서는 middleware를 맨 처음 사용하는 <a href=\"https://github.com/reduxjs/redux/blob/master/src/applyMiddleware.ts\">applyMiddleware</a> 함수를 먼저 볼 필요가 있습니다.<br>\n몇 줄 안되는 단순해 보이는 코드 이지만 사실 javascript를 잘 사용하기 위한 중요한 여러 개념들이 있습니다.<br>\n분석 하기에 앞서 알아둬야할 부분은 middleware 함수의 형태는 다음과 같이 약속되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* something.. */</span><span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>위와 같은 형식을 <strong>Currying</strong>이라 부릅니다.<br>\n필요한 데이터를 클로저를 이용하여 각각의 뜻이 있는 함수에 인자로 잡아두고 <strong>lazy execution</strong>하는 방식으로 자세한 설명은 넘어가지만 반드시 따로 찾아보시기 바랍니다.</p>\n</blockquote>\n<p>해당 섹션의 최종 목적은 위 middleware의 인자값들이 언제 소비되는지 알아보는 것입니다.<br>\n우리가 들여다 봐야할 코드는 다음 두 줄 입니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> middlewareAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  getState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">dispatch</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> chain <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">middleware</span> <span class=\"token operator\">=></span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">dispatch <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span></span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>store<span class=\"token punctuation\">,</span>\n  dispatch\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">middlewareAPI</code>를 모든 middleware의 <code class=\"language-text\">({ dispatch, getState }) =&gt;</code>에 넘겨주어 redux의 핵심 기능을 사용 할 수 있도록 해줍니다.<br>\n<a href=\"https://github.com/reduxjs/redux-thunk/blob/master/src/index.js#L4\">redux-thunk</a>의 경우 넘겨준 위 <code class=\"language-text\">dispatch</code>를 이용하여 비동기 처리를 합니다.<br>\n<code class=\"language-text\">compose</code>는 함수를 합성하는데 이는 javascript function이 first-class objects인 점을 활용한 방법으로 함수형에서 많이 사용합니다.</p>\n<blockquote>\n<h3 id=\"first-class\"><a href=\"#first-class\" aria-label=\"first class permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>first-class</h3>\n<ul>\n<li>변수에 할당할 수 있다.</li>\n<li>함수의 인자값으로 전달 할 수 있다.</li>\n<li>함수의 반환값으로 반환할 수 있다.</li>\n</ul>\n</blockquote>\n<p>또한 decorator패턴 입니다.</p>\n<blockquote>\n<p>이 패턴은 변경에는 닫혀 있고 확장에는 열려 있는 원칙이 묻어 있는 패턴입니다.\n기능 추가에 기존 코드 변경이 필요가 없으며 decorator객체를 추가하여 기능을 무한히 확장할 수 있다.  </p>\n</blockquote>\n<p>middleware를 추가함에 있어 redux 코드에 전혀 영향이 가지 않고 변경 또한 필요하지도 않죠?<br>\n즉 변경되거나 추가될 여지가 있는 부분과 변경되지 않을 부분을 변화율에 따라 따로 떼어냈다고 볼 수 있겠습니다.</p>\n<p>넘겨준 middleware가 <code class=\"language-text\">compose</code>안에서 어떻게 합성되는지 알아볼 차례인데요 이런 방식이 익숙치 않은 분들은\n여기서 부터 머리가 조금 아파질 수 있습니다. 하지만 하나씩 찬찬히 뜯어볼 생각이므로 포기하지 마시길 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">return</span> funcs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>매우 간단하죠?<br>\n여기서 <code class=\"language-text\">(next) =&gt;</code>가 소비됩니다. 즉 [a,b,c] middleware가 있으면 <code class=\"language-text\">a(b(c()))</code>의 형태로 만들어 주면서 next를 다음 middleware로 할당합니다.<br>\nreduce가 끝난 형태는 <code class=\"language-text\">(...args) =&gt; a(b(c(...args)))</code>가 됩니다.\n더 정확하게는 <code class=\"language-text\">(...args) =&gt; f&#39;(c(...args))</code>이며 f’는 <code class=\"language-text\">(c반환 값) =&gt; a(b(c반환 값))</code>가 됩니다.  </p>\n<p>reduce가 반환한 함수는 실행되기 전까지 <code class=\"language-text\">(next) =&gt;</code>가 소비되지 않는 함수입니다. 이 함수를 위 <code class=\"language-text\">compose(...chain)(store.dispatch)</code>에서 redux의 <code class=\"language-text\">dispatch</code>를 넘겨줍니다. 여기서 마침내 도환선 처럼 middleware의 <code class=\"language-text\">(next) =&gt;</code>가 하나씩 소비가 됩니다.  </p>\n<p>c middleware의 next는 redux의 dispatch인 걸 주목합니다. 즉 <u><strong>우리가 쓰는 dispatch는 middleware가 층층이 겹쳐져있는 함수이지 redux의 dispatch가 아닙니다😲</strong></u></p>\n<p>그리고 우리가 dispatch를 이용하여 Action을 날릴 때 비로서 <code class=\"language-text\">(action) =&gt;</code>가 소비 됩니다. 계속해서 next(action)을 하면 위에서 currying하여 잡아둔 다음 middleware의 <code class=\"language-text\">(action) =&gt;</code>를 소비하게 되는 것이고 결국에는 마지막 middleware의 next는 redux의 dispatch이기 때문에 최종적으로 redux에 action이 도달하게 됩니다.</p>\n<p>누군가 나에게 다음과 같은 질문을 한다고 생각해 봅시다.<br>\n<strong><em>“액션을 dispatch만 하였는데 redux는 어떻게 알고 뒤에서 middleware를 실행하는 건가요?”</em></strong><br>\n네. 지금보니 간단한 질문이네요!</p>\n<h2 id=\"2-redux는-전달해준-액션을-어떻게-내가-원하는-reducer에-전달해주는-것-일까\"><a href=\"#2-redux%EB%8A%94-%EC%A0%84%EB%8B%AC%ED%95%B4%EC%A4%80-%EC%95%A1%EC%85%98%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%82%B4%EA%B0%80-%EC%9B%90%ED%95%98%EB%8A%94-reducer%EC%97%90-%EC%A0%84%EB%8B%AC%ED%95%B4%EC%A3%BC%EB%8A%94-%EA%B2%83-%EC%9D%BC%EA%B9%8C\" aria-label=\"2 redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것 일까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것 일까❓</h2>\n<p>이번에도 역시 reducer가 가장 먼저 쓰이는 <a href=\"https://github.com/reduxjs/redux/blob/master/src/combineReducers.ts#L139\">combineReducers</a> 부터 들여다 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reducers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> finalReducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> reducerKeys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> reducerKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> reducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      finalReducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> finalReducerKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>finalReducers<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">combination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* something.. */</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>reducers의 최소 조건인 function을 검증하면서 key를 잡고있습니다. 이는 추후에 reducer의 이름 다시 말해 redux의 state객체의 각 property 이름이 바로 <code class=\"language-text\">combineReducers</code>에 넘겨주는 객체의 key에 의해 정해지는 것을 알수 있습니다.<br>\n그리고 바로 <code class=\"language-text\">return combination</code>으로 함수를 반환 해줍니다.  <code class=\"language-text\">combineReducers</code> 코드는 환경설정이라 할 수 있고 실 기능은 <code class=\"language-text\">combination</code>이 담당하고 있으며 이는 redux내부에서 사용되어 집니다.<br>\n이렇게 코드가 나누어져 있는 이유는 무엇일까요?<br>\n저는 코드의 성질과 역할이 달라서 격리시켰다고 생각합니다. 역할을 정확히 나누어 한번 정해지면 변경될 일이 없는 부분과 요구 사항에 따라 추가 변경이 일어날 확률이 높고 주입되는 상태가 언제든지 변경될 수 있으며 재사용이 높은 부분으로 나누었다고 볼 수 있습니다. 분명 이렇게 나누지 않았다면 변경될 확률이 낮은 코드들이 자주 변경되는 코드와 혼재되어 변경에 영향을 받는 코드들의 범위가 커지면서 버그, 테스트, 유지보수 등 모든 면에서 안좋았을 것이라 생각하며 이런 역할, 변화에 따른 격리는 여러 오픈소스를 보면 자주 보이는 형식으로 꼭 항상 머리에서 생각하며 코딩해야 됩니다.</p>\n<p>그러면 이 함수가 사용되어지는 곳은 어디 일까요?<br>\nredux의 dispatch에서 사용됩니다. action을 dispagch에 담아 보내면 <u>middleware -> redux dispatch -> reducer</u>의 순서로 흐릅니다.\n그러면 최종 목적지인 combination를 살펴보겠습니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">combination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hasChanged <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> nextState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> finalReducerKeys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> finalReducerKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> finalReducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> previousStateForKey <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> nextStateForKey <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>previousStateForKey<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span></span>    nextState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextStateForKey\n    hasChanged <span class=\"token operator\">=</span> hasChanged <span class=\"token operator\">||</span> nextStateForKey <span class=\"token operator\">!==</span> previousStateForKey\n  <span class=\"token punctuation\">}</span>\n  hasChanged <span class=\"token operator\">=</span> hasChanged <span class=\"token operator\">||</span> finalReducerKeys<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">return</span> hasChanged <span class=\"token operator\">?</span> nextState <span class=\"token punctuation\">:</span> state\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>보이시나요? 모든 reducer를 돌면서 state와 action을 던져줍니다. 그리고 변경이 적용되기 위해선 객체를 새로 만들어야 하는 이유도 보입니다.<br>\n자신이 처리하지 않는 action의 경우 그저 default(switch의 경우)의 반환값이 반환될 것입니다. 그 다음 변경 여부는 값이 아닌 reference 비교로 결정 됩니다.<br>\n<strong><em>“reference로 변경 여부를 결정 하기 때문에 항상 새로운 객체를 반환해야해!”</em></strong>라고 여기까지만 생각하고 개발하는 것은 2%가 부족합니다.<br>\n<strong><em>“왜?”</em></strong>가 빠져있습니다. redux는 왜 직접 데이터를 변경하지 않고 새로운 객체를 만들까? 그게 더 비용이 들지는 않을까? 여기에 대한 대답은 <strong>순수함수</strong>에서 스스로 찾아보세요!</p>\n<blockquote>\n<p>순수함수를 쓰는 이유중 하나는 객체의 투 포인터 참조에서 오는 데이터 공유 때문 입니다.\n단순 변수만을 참조하는 원 포인터 참조는 기존 데이터 변경에 영향을 받지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbar <span class=\"token operator\">===</span> foo <span class=\"token comment\">// false;</span></code></pre></div>\n</blockquote>\n<blockquote>\n<p>하지만 투포인터 참조를 할 경우 그렇지 않습니다.  </p>\n</blockquote>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbar<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"f\"</span> <span class=\"token comment\">// false</span></code></pre></div>\n</blockquote>\n<blockquote>\n<p>당연한 얘기 같습니다. 하지만 여기서 중요한 점은 foo을 여러 곳에서 물고있을 경우 foo의 직접적 데이터 변경의 여파를 예측할 수 없습니다.\n하지만 새로운 객체를 만들어 데이터 변경을 적용하게 되면 기존에 foo를 물고있던 곳에 영향을 주지 않습니다. 더불어 그 변경의 여파는 새로운 데이터를 반환받아 적용한 곳부터 시작하기 때문에 추적 또한 용이합니다.  </p>\n</blockquote>\n<p><strong><em>“redux는 전달해준 액션을 어떻게 내가 원하는 reducer에 전달해주는 것 일까?”</em></strong>  여기에 대한 대답은 <u>해당 action을 처리하는 reducer에게만 넘겨주는게 아니라 모든 reducer에게 액션을 던진다</u>입니다.<br>\n또한 <strong><em>“reducer에서 반환하는 값을 왜 항상 새로 만들어아 햐는 것일까? 순수함수는 무엇인가?”</em></strong> 여기에 대한 대답도 할 수 있겠네요😀</p>\n<h2 id=\"3-redux-state가-변경되면-모든-컴포넌트들이-re-render되는가\"><a href=\"#3-redux-state%EA%B0%80-%EB%B3%80%EA%B2%BD%EB%90%98%EB%A9%B4-%EB%AA%A8%EB%93%A0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%93%A4%EC%9D%B4-re-render%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"3 redux state가 변경되면 모든 컴포넌트들이 re render되는가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. redux state가 변경되면 모든 컴포넌트들이 re-render되는가❓</h2>\n<p>마지막 섹션입니다.<br>\n해당 부분은 class와 funcitonal component에 따라 봐야할 부분이 다르기 때문에 최근에 대두되는 hook을 기준으로 분석해 보겠습니다.  </p>\n<blockquote>\n<p>해당 섹션은 hook을 중심으로 이야기 합니다. hook을 모르신다면 먼저 <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>를 보고오시기 바랍니다.</p>\n</blockquote>\n<p>어디서 부터 접근해야 할 까요? class의 경우 component와의 접점인 connect부터 접근했겠지만 hook은 그런 부분이 없습니다.<br>\n그렇다면 그나마 데이터에 접근하는 <a href=\"https://github.com/reduxjs/react-redux/blob/master/src/hooks/useSelector.js\">useSelector</a>가 가장 유력해 보입니다.</p>","frontmatter":{"title":"Redux 톺아보기","date":"2019-12-05"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/redux/in-depth-redux/","previous":null,"next":null}}}