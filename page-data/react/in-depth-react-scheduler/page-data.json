{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/in-depth-react-scheduler/","result":{"data":{"site":{"siteMetadata":{"title":"Deep Dive Magic Code","author":"Goidle","comment":{"utterances":"goidle/goidle.github.io"}}},"markdownRemark":{"id":"65b54a97-ac8c-5939-9710-6feb04d09c16","excerpt":"모든 설명은 v16.12.0 버전 함수형 컴포넌트 기준입니다. 버전에 따라 코드는 변경될 수 있으며 클래스 컴포넌트는 설명에서 제외됨을 알려드립니다. 리액트의 스케쥴러는 push방식이 아닌 pull 방식.  리컨실러가 판단해서 Work를 실행하라고 명령하는게 아닌 스케쥴러 본인이 Work를 실행하기 적당한때 실행하도록 권한을 위임한 방식으로 즉 어떠한 일을 더 잘하는 놈에게 제어권을 쥐어 주는거라고 생각하면 된다.\n그래서 우리는  리컨실러가 어떻게 스케쥴러에게 Work…","html":"<blockquote>\n<p>모든 설명은 v16.12.0 버전 함수형 컴포넌트 기준입니다. 버전에 따라 코드는 변경될 수 있으며 클래스 컴포넌트는 설명에서 제외됨을 알려드립니다.</p>\n</blockquote>\n<p>리액트의 스케쥴러는 push방식이 아닌 pull 방식.  리컨실러가 판단해서 Work를 실행하라고 명령하는게 아닌 스케쥴러 본인이 Work를 실행하기 적당한때 실행하도록 권한을 위임한 방식으로 즉 어떠한 일을 더 잘하는 놈에게 제어권을 쥐어 주는거라고 생각하면 된다.\n그래서 우리는 </p>\n<ol>\n<li>리컨실러가 어떻게 스케쥴러에게 Work를 넘겨주는지</li>\n<li>스케쥴러는 스케쥴링된 Work들을 어떤방식으로 비동기로 실행하는지</li>\n</ol>\n<p>스케쥴러는 VDOM 재조정 작업을 실행시키는 놈으로 우리는 재조정 작업의 시작 부분과 끝 부분(<down><em>render phase, commit phase</em></down>)을 이번 포스트를 통해서 확인하게 됩니다.</p>\n<p>이전 포스트에서 <em>update</em>를 만드는 <code class=\"language-text\">dispatchAction()</code>의 끝 부분에 <code class=\"language-text\">scheduleWork()</code>가 있었습니다. 이 함수가 이번 포스트의 시작 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// reconciler > ReactFiberHooks.js > dispatchAction()</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">fiber<span class=\"token punctuation\">,</span>\n  queue<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생략..</span>\n  <span class=\"token function\">scheduleWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"center\">목록</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><a href=\"https://goidle.github.io/react/in-depth-react-hooks_1/\">React 톺아보기- 03. Hooks_1</a></td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><a href=\"https://goidle.github.io/react/in-depth-react-scheduler/\">React 톺아보기- 04. Scheduler</a></td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"React 톺아보기- 04. Scheduler","date":"2020-06-21","keywords":["리액트","react","fiber","hook","hooks","useState","useEffect","useLayoutEffect","useCallback","scheduler"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react/in-depth-react-scheduler/","previous":{"fields":{"slug":"/react/in-depth-react-hooks_2/"},"frontmatter":{"title":"React 톺아보기- 03. Hooks_2","category":"react"}},"next":null}}}