{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/in-depth-react-preview/","result":{"data":{"site":{"siteMetadata":{"title":"Deep Dive Magic Code","author":"Goidle","comment":{"utterances":"goidle/goidle.github.io"}}},"markdownRemark":{"id":"ef5842aa-e4b1-5e37-84ff-c613a01976b4","excerpt":"모든 설명은 v16.12.0 버전 함수형 컴포넌트 기준입니다. 버전에 따라 코드는 변경될 수 있으며 클래스 컴포넌트는 설명에서 제외됨을 알려드립니다. 1. 들어가기에 앞서 먼저 이 시리즈는 리액트 사용법에 대한 글이 아닙니다. 리액트를 통해 프로젝트를 진행한 경험이 있고 동작 방식을 어렴풋이 이해하기는 하지만 여전히 리액트가 마법처럼 느껴지고 응용, 에러 디버깅 등에 어려움을 겪는 사람들을 위해 작성하였습니다. 시리즈의 내용은 사용자의 상호작용으로 부터 훅을 통해 컴포넌트가 업데이트 되고 DOM…","html":"<blockquote>\n<p>모든 설명은 v16.12.0 버전 함수형 컴포넌트 기준입니다. 버전에 따라 코드는 변경될 수 있으며 클래스 컴포넌트는 설명에서 제외됨을 알려드립니다.</p>\n</blockquote>\n<h1 id=\"1-들어가기에-앞서\"><a href=\"#1-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"1 들어가기에 앞서 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 들어가기에 앞서</h1>\n<p>먼저 이 시리즈는 리액트 사용법에 대한 글이 아닙니다.<br>\n리액트를 통해 프로젝트를 진행한 경험이 있고 동작 방식을 어렴풋이 이해하기는 하지만 여전히 리액트가 마법처럼 느껴지고 응용, 에러 디버깅 등에 어려움을 겪는 사람들을 위해 작성하였습니다.</p>\n<p>시리즈의 내용은 사용자의 상호작용으로 부터 훅을 통해 컴포넌트가 업데이트 되고 DOM에 마운트되기 까지의 일련의 과정을 실제 코드를 통해 분석해 나가게 될 것입니다.  </p>\n<p>시리즈를 끝내고 나면 Virtual DOM이 무엇인지, 컴포넌트 상태가 바뀌었을 때 리액트는 어떻게 해당 컴포넌트를 리-렌더링 시키는지, 어떻게 변경된 부분만 DOM에 마운트 되는지, hook은 컴포넌트와 어떤 방식으로 매핑되어 사용되는지, 이벤트 구현은 어떻게 되어 있는지 등 리액트의 전박전인 큰 줄기의 흐름을 알게 될 것입니다.</p>\n<p>들어가기에 앞서 당부 드리고 싶은 말씀은 코드를 분석할 때 필히 분석 대상이 어떤 패키지 밑에 있는 것이고 모듈과 함수 이름은 무엇인지 먼저 보고 머리에 담아둔 상태로 코드를 보시기 바랍니다.\n리액트는 역할 별로 많은 모듈들과 동작에 맞는 함수들을 만들어 놓았습니다. 코드만 보고 넘어가게 된다면 리액트의 구조로 코드를 바라보기가 어려우며 이는 추후에 지금 내가 어디를 보고 있으며 어떠한 흐름으로 여기까지 왔는지 이해하기가 힘듭니다. 이해도 제대로 못한 상태로 시간은 시간대로 날리고 가장 큰 걱정은 혼자 궁금한 부분을 분석하고 싶을 때 많은 어려움을 겪게 될 것입니다.</p>\n<p>여기서 언급되는 내용을 몰라도 리액트 프로젝트를 진행하는데 아무런 영향이 없지만 이 시리즈를 통해 리액트에 대한 막연한 인식의 허들을 낮추고 궁금증을 가지고 있는 부분을 거기서 멈추지 않고 혼자 코드를 보면서 분석 해보려는 의지를 심어드리기 위하여 이 글을 작성해 봅니다.</p>\n<h1 id=\"2-패키지-구조\"><a href=\"#2-%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 패키지 구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 패키지 구조</h1>\n<p>리액트는 react 코어, 플랫폼과 관련된 renderer, vDOM과 관련된 reconciler, 작업 실행기인 scheduler 그리고 event로 나눌 수 있습니다.</p>\n<h3 id=\"react\"><a href=\"#react\" aria-label=\"react permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react</h3>\n<p>컴포넌트 정의와 관련된 api가 있는 패키지 입니다.\n대표적으로 <em>reactElement</em>를 만드는 <code class=\"language-text\">React.createElement</code>가 있으며 개발자에게 다른 패키지의 모듈을 제공할 수 있도록 중간 다리 역할을 하는 모듈들만 위치해 있습니다.\n이 코어는 다른 패키지에 의존성을 가지고 있지 않기 때문에 여러 플랫폼에 올려서 사용할 수 있습니다.</p>\n<h3 id=\"renderer\"><a href=\"#renderer\" aria-label=\"renderer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>renderer</h3>\n<p>플랫폼과 관련된 네이티브 로직이 위치해 있습니다. react-dom, react-native-renderer가 여기에 해당합니다.\n플랫폼과 react를 연결하며 실제적으로 플랫폼에 컴포넌트를 mount합니다. reconciler와 lagacy-event 패키지에 의존성을 가지고 있습니다.</p>\n<h3 id=\"eventlegacy-events\"><a href=\"#eventlegacy-events\" aria-label=\"eventlegacy events permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event(legacy-events)</h3>\n<p>SyntheticEvent라는 이름으로 구현되어 있습니다. native event를 wrapping하며 개발자가 native event를 사용하기 전 리액트에서 추가적인 제어를 하기 위해 따로 개발된 이벤트입니다.\n현재 리액트에서 제일 바꾸고 싶어 하는 영역으로 보이며 다른 시스템으로 변경하다 중단된 걸 보아하니 쉽지 않아 보입니다.</p>\n<h3 id=\"scheduler\"><a href=\"#scheduler\" aria-label=\"scheduler permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scheduler</h3>\n<p>리액트는 여러가지 이유로 작업을 비동기로 실행시켜야 합니다. 이 작업은 Task란 이름으로 우선순위에 따라 스케쥴링 됩니다.\nscheduler는 자신에게 할당된 시간내에 Task를 동기적으로 최소힙 자료구조에서 꺼내 실행합니다.\n이 패키지는 호스트 비동기 api에 의존적입니다.</p>\n<h3 id=\"reconciler\"><a href=\"#reconciler\" aria-label=\"reconciler permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reconciler</h3>\n<p>리액트의 핵심 패키지입니다.\n그만큼 여러 고민과 노력들이 들어가 있고 이 시리즈에서 가장 많은 시간을 보내게될 패키지 입니다.\nv15 이전에는 stack기반 구현이었다면 v16부터는 몇 년간의 연구 끝에 fiber architecture를 도입했습니다.\nvDOM node에 해당하는 fiber, vDOM 생성과 순회, diff 알고리즘 등 중요한 기능들이 위치해 있습니다.</p>\n<h1 id=\"3-용어-정리\"><a href=\"#3-%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC\" aria-label=\"3 용어 정리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 용어 정리</h1>\n<h3 id=\"컴포넌트\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"컴포넌트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트</h3>\n<p>리액트에서는 여러 종류의 컴포넌트가 있습니다. 자체 제공하는 컴포넌트, 사용자 정의 컴포넌트, 플랫폼 컴포넌트 등<br>\n플랫폼 컴포넌트는 <em>Host Component</em>, 사용자 정의 컴포넌트는 <em>Custom Component</em> , vDOM의 최상단 노드는 <em>Host Root</em>라고 명칭하겠습니다.</p>\n<h3 id=\"렌더링\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"렌더링 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링</h3>\n<p>일반적으로 컴포넌트의 실행을 렌더링이라고 말합니다. 하지만 세부 구현 사항으로 내려가면 여러 단계가 더 존재하기 때문에 용어 혼동을 방지하기 위해 재 정의하고 가겠습니다.  </p>\n<p>컴포넌트 실행은 reconciler에서 합니다. 그 후 vDOM 작업이 들어가고 DOM에 삽입 시킵니다.<br>\n다시 말해서 컴포넌트 실행과 DOM 삽입은 별개라는 뜻입니다.<br>\n그리고 DOM에 삽입하는 것과 화면에 그려지는 것 또한 마찬가지로 별개입니다.</p>\n<p>앞으로 렌더링은 컴포넌트가 실행되어 <em>reactElement</em>를 반환하고 vDOM에 적용되는 일련의 과정을 일컫는다고 하겠습니다.<br>\n컴포넌트 실행은 그저 함수 ‘호출’로만 생각하면 됩니다. <em>reactElement</em>를 반환한다 그 이상 그 이하도 아닙니다.<br>\nvDOM을 DOM에 삽입하는 것을 마운트 브라우저가 화면에 그리는걸 페인트라 정의하겠습니다.</p>\n<h3 id=\"virtual-dom\"><a href=\"#virtual-dom\" aria-label=\"virtual dom permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual DOM</h3>\n<p>이하 vDOM으로 명칭</p>\n<ol>\n<li><em>reactElement</em> , <em>fiber</em><br>\n<em>reactElement</em>는 컴포넌트의 type, props만을 가진 객체입니다. 컴포넌트가 반환하는 자식이 <em>reactElement</em>입니다.<br>\nvDOM의 node는 <em>fiber</em>라고 불리는 객체입니다. 이 객체는 컴포넌트가 반환한 <em>reactElement</em>를 vDOM에 올리기 위해 확장시켜주는 객체입니다.<br>\n이 <em>fiber</em>를 통해 컴포넌트의 state, hook, life cycle 등 거의 대부분이 관리됩니다.</li>\n<li><em>current</em>, <em>workInProgress</em><br>\n리액트는 더블 버퍼링 형태로 vDOM을 두개 가지고 있습니다.<br>\n<em>current</em>는 마운트가 끝난 트리이며 <em>workInProgress</em>는 업데이트가 적용중인 트리입니다.</li>\n</ol>\n<p>더 많은 용어들이 있지만 크게 혼동되는 부분만 짚고 넘어가겠습니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">목록</th>\n<th align=\"right\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">02</td>\n<td align=\"right\"><a href=\"https://goidle.github.io/react/in-depth-react-intro/\">React 톺아보기- 02. Intro</a></td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"React 톺아보기- 01. Preview","date":"2020-06-09","keywords":["리액트","react","fiber","scheduler","가상 돔","virtual dom"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react/in-depth-react-preview/","previous":{"fields":{"slug":"/redux/in-depth-redux/"},"frontmatter":{"title":"Redux 톺아보기","category":"redux"}},"next":{"fields":{"slug":"/react/in-depth-react-intro/"},"frontmatter":{"title":"React 톺아보기- 02. Intro","category":"react"}}}}}